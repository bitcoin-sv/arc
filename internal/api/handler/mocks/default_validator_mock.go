// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/validator"
	sdkTx "github.com/bsv-blockchain/go-sdk/transaction"
	"sync"
)

// DefaultValidatorMock is a mock implementation of handler.DefaultValidator.
//
//	func TestSomethingThatUsesDefaultValidator(t *testing.T) {
//
//		// make and configure a mocked handler.DefaultValidator
//		mockedDefaultValidator := &DefaultValidatorMock{
//			ValidateTransactionFunc: func(ctx context.Context, tx *sdkTx.Transaction, feeValidation validator.FeeValidation, scriptValidation validator.ScriptValidation, blockHeight int32) error {
//				panic("mock out the ValidateTransaction method")
//			},
//		}
//
//		// use mockedDefaultValidator in code that requires handler.DefaultValidator
//		// and then make assertions.
//
//	}
type DefaultValidatorMock struct {
	// ValidateTransactionFunc mocks the ValidateTransaction method.
	ValidateTransactionFunc func(ctx context.Context, tx *sdkTx.Transaction, feeValidation validator.FeeValidation, scriptValidation validator.ScriptValidation, blockHeight int32) error

	// calls tracks calls to the methods.
	calls struct {
		// ValidateTransaction holds details about calls to the ValidateTransaction method.
		ValidateTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx *sdkTx.Transaction
			// FeeValidation is the feeValidation argument value.
			FeeValidation validator.FeeValidation
			// ScriptValidation is the scriptValidation argument value.
			ScriptValidation validator.ScriptValidation
			// BlockHeight is the blockHeight argument value.
			BlockHeight int32
		}
	}
	lockValidateTransaction sync.RWMutex
}

// ValidateTransaction calls ValidateTransactionFunc.
func (mock *DefaultValidatorMock) ValidateTransaction(ctx context.Context, tx *sdkTx.Transaction, feeValidation validator.FeeValidation, scriptValidation validator.ScriptValidation, blockHeight int32) error {
	if mock.ValidateTransactionFunc == nil {
		panic("DefaultValidatorMock.ValidateTransactionFunc: method is nil but DefaultValidator.ValidateTransaction was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Tx               *sdkTx.Transaction
		FeeValidation    validator.FeeValidation
		ScriptValidation validator.ScriptValidation
		BlockHeight      int32
	}{
		Ctx:              ctx,
		Tx:               tx,
		FeeValidation:    feeValidation,
		ScriptValidation: scriptValidation,
		BlockHeight:      blockHeight,
	}
	mock.lockValidateTransaction.Lock()
	mock.calls.ValidateTransaction = append(mock.calls.ValidateTransaction, callInfo)
	mock.lockValidateTransaction.Unlock()
	return mock.ValidateTransactionFunc(ctx, tx, feeValidation, scriptValidation, blockHeight)
}

// ValidateTransactionCalls gets all the calls that were made to ValidateTransaction.
// Check the length with:
//
//	len(mockedDefaultValidator.ValidateTransactionCalls())
func (mock *DefaultValidatorMock) ValidateTransactionCalls() []struct {
	Ctx              context.Context
	Tx               *sdkTx.Transaction
	FeeValidation    validator.FeeValidation
	ScriptValidation validator.ScriptValidation
	BlockHeight      int32
} {
	var calls []struct {
		Ctx              context.Context
		Tx               *sdkTx.Transaction
		FeeValidation    validator.FeeValidation
		ScriptValidation validator.ScriptValidation
		BlockHeight      int32
	}
	mock.lockValidateTransaction.RLock()
	calls = mock.calls.ValidateTransaction
	mock.lockValidateTransaction.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/pkg/api"
	"io"
	"net/http"
	"sync"
)

// Ensure, that ClientInterfaceMock does implement api.ClientInterface.
// If this is not the case, regenerate this file with moq.
var _ api.ClientInterface = &ClientInterfaceMock{}

// ClientInterfaceMock is a mock implementation of api.ClientInterface.
//
//	func TestSomethingThatUsesClientInterface(t *testing.T) {
//
//		// make and configure a mocked api.ClientInterface
//		mockedClientInterface := &ClientInterfaceMock{
//			GETHealthFunc: func(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
//				panic("mock out the GETHealth method")
//			},
//			GETPolicyFunc: func(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
//				panic("mock out the GETPolicy method")
//			},
//			GETTransactionStatusFunc: func(ctx context.Context, txid string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
//				panic("mock out the GETTransactionStatus method")
//			},
//			POSTTransactionFunc: func(ctx context.Context, params *api.POSTTransactionParams, body api.TransactionRequest, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
//				panic("mock out the POSTTransaction method")
//			},
//			POSTTransactionWithBodyFunc: func(ctx context.Context, params *api.POSTTransactionParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
//				panic("mock out the POSTTransactionWithBody method")
//			},
//			POSTTransactionWithTextBodyFunc: func(ctx context.Context, params *api.POSTTransactionParams, body string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
//				panic("mock out the POSTTransactionWithTextBody method")
//			},
//			POSTTransactionsFunc: func(ctx context.Context, params *api.POSTTransactionsParams, body []api.TransactionRequest, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
//				panic("mock out the POSTTransactions method")
//			},
//			POSTTransactionsWithBodyFunc: func(ctx context.Context, params *api.POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
//				panic("mock out the POSTTransactionsWithBody method")
//			},
//			POSTTransactionsWithTextBodyFunc: func(ctx context.Context, params *api.POSTTransactionsParams, body string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
//				panic("mock out the POSTTransactionsWithTextBody method")
//			},
//		}
//
//		// use mockedClientInterface in code that requires api.ClientInterface
//		// and then make assertions.
//
//	}
type ClientInterfaceMock struct {
	// GETHealthFunc mocks the GETHealth method.
	GETHealthFunc func(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error)

	// GETPolicyFunc mocks the GETPolicy method.
	GETPolicyFunc func(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error)

	// GETTransactionStatusFunc mocks the GETTransactionStatus method.
	GETTransactionStatusFunc func(ctx context.Context, txid string, reqEditors ...api.RequestEditorFn) (*http.Response, error)

	// POSTTransactionFunc mocks the POSTTransaction method.
	POSTTransactionFunc func(ctx context.Context, params *api.POSTTransactionParams, body api.TransactionRequest, reqEditors ...api.RequestEditorFn) (*http.Response, error)

	// POSTTransactionWithBodyFunc mocks the POSTTransactionWithBody method.
	POSTTransactionWithBodyFunc func(ctx context.Context, params *api.POSTTransactionParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error)

	// POSTTransactionWithTextBodyFunc mocks the POSTTransactionWithTextBody method.
	POSTTransactionWithTextBodyFunc func(ctx context.Context, params *api.POSTTransactionParams, body string, reqEditors ...api.RequestEditorFn) (*http.Response, error)

	// POSTTransactionsFunc mocks the POSTTransactions method.
	POSTTransactionsFunc func(ctx context.Context, params *api.POSTTransactionsParams, body []api.TransactionRequest, reqEditors ...api.RequestEditorFn) (*http.Response, error)

	// POSTTransactionsWithBodyFunc mocks the POSTTransactionsWithBody method.
	POSTTransactionsWithBodyFunc func(ctx context.Context, params *api.POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error)

	// POSTTransactionsWithTextBodyFunc mocks the POSTTransactionsWithTextBody method.
	POSTTransactionsWithTextBodyFunc func(ctx context.Context, params *api.POSTTransactionsParams, body string, reqEditors ...api.RequestEditorFn) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// GETHealth holds details about calls to the GETHealth method.
		GETHealth []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqEditors is the reqEditors argument value.
			ReqEditors []api.RequestEditorFn
		}
		// GETPolicy holds details about calls to the GETPolicy method.
		GETPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqEditors is the reqEditors argument value.
			ReqEditors []api.RequestEditorFn
		}
		// GETTransactionStatus holds details about calls to the GETTransactionStatus method.
		GETTransactionStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Txid is the txid argument value.
			Txid string
			// ReqEditors is the reqEditors argument value.
			ReqEditors []api.RequestEditorFn
		}
		// POSTTransaction holds details about calls to the POSTTransaction method.
		POSTTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *api.POSTTransactionParams
			// Body is the body argument value.
			Body api.TransactionRequest
			// ReqEditors is the reqEditors argument value.
			ReqEditors []api.RequestEditorFn
		}
		// POSTTransactionWithBody holds details about calls to the POSTTransactionWithBody method.
		POSTTransactionWithBody []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *api.POSTTransactionParams
			// ContentType is the contentType argument value.
			ContentType string
			// Body is the body argument value.
			Body io.Reader
			// ReqEditors is the reqEditors argument value.
			ReqEditors []api.RequestEditorFn
		}
		// POSTTransactionWithTextBody holds details about calls to the POSTTransactionWithTextBody method.
		POSTTransactionWithTextBody []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *api.POSTTransactionParams
			// Body is the body argument value.
			Body string
			// ReqEditors is the reqEditors argument value.
			ReqEditors []api.RequestEditorFn
		}
		// POSTTransactions holds details about calls to the POSTTransactions method.
		POSTTransactions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *api.POSTTransactionsParams
			// Body is the body argument value.
			Body []api.TransactionRequest
			// ReqEditors is the reqEditors argument value.
			ReqEditors []api.RequestEditorFn
		}
		// POSTTransactionsWithBody holds details about calls to the POSTTransactionsWithBody method.
		POSTTransactionsWithBody []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *api.POSTTransactionsParams
			// ContentType is the contentType argument value.
			ContentType string
			// Body is the body argument value.
			Body io.Reader
			// ReqEditors is the reqEditors argument value.
			ReqEditors []api.RequestEditorFn
		}
		// POSTTransactionsWithTextBody holds details about calls to the POSTTransactionsWithTextBody method.
		POSTTransactionsWithTextBody []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *api.POSTTransactionsParams
			// Body is the body argument value.
			Body string
			// ReqEditors is the reqEditors argument value.
			ReqEditors []api.RequestEditorFn
		}
	}
	lockGETHealth                    sync.RWMutex
	lockGETPolicy                    sync.RWMutex
	lockGETTransactionStatus         sync.RWMutex
	lockPOSTTransaction              sync.RWMutex
	lockPOSTTransactionWithBody      sync.RWMutex
	lockPOSTTransactionWithTextBody  sync.RWMutex
	lockPOSTTransactions             sync.RWMutex
	lockPOSTTransactionsWithBody     sync.RWMutex
	lockPOSTTransactionsWithTextBody sync.RWMutex
}

// GETHealth calls GETHealthFunc.
func (mock *ClientInterfaceMock) GETHealth(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	if mock.GETHealthFunc == nil {
		panic("ClientInterfaceMock.GETHealthFunc: method is nil but ClientInterface.GETHealth was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqEditors []api.RequestEditorFn
	}{
		Ctx:        ctx,
		ReqEditors: reqEditors,
	}
	mock.lockGETHealth.Lock()
	mock.calls.GETHealth = append(mock.calls.GETHealth, callInfo)
	mock.lockGETHealth.Unlock()
	return mock.GETHealthFunc(ctx, reqEditors...)
}

// GETHealthCalls gets all the calls that were made to GETHealth.
// Check the length with:
//
//	len(mockedClientInterface.GETHealthCalls())
func (mock *ClientInterfaceMock) GETHealthCalls() []struct {
	Ctx        context.Context
	ReqEditors []api.RequestEditorFn
} {
	var calls []struct {
		Ctx        context.Context
		ReqEditors []api.RequestEditorFn
	}
	mock.lockGETHealth.RLock()
	calls = mock.calls.GETHealth
	mock.lockGETHealth.RUnlock()
	return calls
}

// GETPolicy calls GETPolicyFunc.
func (mock *ClientInterfaceMock) GETPolicy(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	if mock.GETPolicyFunc == nil {
		panic("ClientInterfaceMock.GETPolicyFunc: method is nil but ClientInterface.GETPolicy was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ReqEditors []api.RequestEditorFn
	}{
		Ctx:        ctx,
		ReqEditors: reqEditors,
	}
	mock.lockGETPolicy.Lock()
	mock.calls.GETPolicy = append(mock.calls.GETPolicy, callInfo)
	mock.lockGETPolicy.Unlock()
	return mock.GETPolicyFunc(ctx, reqEditors...)
}

// GETPolicyCalls gets all the calls that were made to GETPolicy.
// Check the length with:
//
//	len(mockedClientInterface.GETPolicyCalls())
func (mock *ClientInterfaceMock) GETPolicyCalls() []struct {
	Ctx        context.Context
	ReqEditors []api.RequestEditorFn
} {
	var calls []struct {
		Ctx        context.Context
		ReqEditors []api.RequestEditorFn
	}
	mock.lockGETPolicy.RLock()
	calls = mock.calls.GETPolicy
	mock.lockGETPolicy.RUnlock()
	return calls
}

// GETTransactionStatus calls GETTransactionStatusFunc.
func (mock *ClientInterfaceMock) GETTransactionStatus(ctx context.Context, txid string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	if mock.GETTransactionStatusFunc == nil {
		panic("ClientInterfaceMock.GETTransactionStatusFunc: method is nil but ClientInterface.GETTransactionStatus was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Txid       string
		ReqEditors []api.RequestEditorFn
	}{
		Ctx:        ctx,
		Txid:       txid,
		ReqEditors: reqEditors,
	}
	mock.lockGETTransactionStatus.Lock()
	mock.calls.GETTransactionStatus = append(mock.calls.GETTransactionStatus, callInfo)
	mock.lockGETTransactionStatus.Unlock()
	return mock.GETTransactionStatusFunc(ctx, txid, reqEditors...)
}

// GETTransactionStatusCalls gets all the calls that were made to GETTransactionStatus.
// Check the length with:
//
//	len(mockedClientInterface.GETTransactionStatusCalls())
func (mock *ClientInterfaceMock) GETTransactionStatusCalls() []struct {
	Ctx        context.Context
	Txid       string
	ReqEditors []api.RequestEditorFn
} {
	var calls []struct {
		Ctx        context.Context
		Txid       string
		ReqEditors []api.RequestEditorFn
	}
	mock.lockGETTransactionStatus.RLock()
	calls = mock.calls.GETTransactionStatus
	mock.lockGETTransactionStatus.RUnlock()
	return calls
}

// POSTTransaction calls POSTTransactionFunc.
func (mock *ClientInterfaceMock) POSTTransaction(ctx context.Context, params *api.POSTTransactionParams, body api.TransactionRequest, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	if mock.POSTTransactionFunc == nil {
		panic("ClientInterfaceMock.POSTTransactionFunc: method is nil but ClientInterface.POSTTransaction was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Params     *api.POSTTransactionParams
		Body       api.TransactionRequest
		ReqEditors []api.RequestEditorFn
	}{
		Ctx:        ctx,
		Params:     params,
		Body:       body,
		ReqEditors: reqEditors,
	}
	mock.lockPOSTTransaction.Lock()
	mock.calls.POSTTransaction = append(mock.calls.POSTTransaction, callInfo)
	mock.lockPOSTTransaction.Unlock()
	return mock.POSTTransactionFunc(ctx, params, body, reqEditors...)
}

// POSTTransactionCalls gets all the calls that were made to POSTTransaction.
// Check the length with:
//
//	len(mockedClientInterface.POSTTransactionCalls())
func (mock *ClientInterfaceMock) POSTTransactionCalls() []struct {
	Ctx        context.Context
	Params     *api.POSTTransactionParams
	Body       api.TransactionRequest
	ReqEditors []api.RequestEditorFn
} {
	var calls []struct {
		Ctx        context.Context
		Params     *api.POSTTransactionParams
		Body       api.TransactionRequest
		ReqEditors []api.RequestEditorFn
	}
	mock.lockPOSTTransaction.RLock()
	calls = mock.calls.POSTTransaction
	mock.lockPOSTTransaction.RUnlock()
	return calls
}

// POSTTransactionWithBody calls POSTTransactionWithBodyFunc.
func (mock *ClientInterfaceMock) POSTTransactionWithBody(ctx context.Context, params *api.POSTTransactionParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	if mock.POSTTransactionWithBodyFunc == nil {
		panic("ClientInterfaceMock.POSTTransactionWithBodyFunc: method is nil but ClientInterface.POSTTransactionWithBody was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Params      *api.POSTTransactionParams
		ContentType string
		Body        io.Reader
		ReqEditors  []api.RequestEditorFn
	}{
		Ctx:         ctx,
		Params:      params,
		ContentType: contentType,
		Body:        body,
		ReqEditors:  reqEditors,
	}
	mock.lockPOSTTransactionWithBody.Lock()
	mock.calls.POSTTransactionWithBody = append(mock.calls.POSTTransactionWithBody, callInfo)
	mock.lockPOSTTransactionWithBody.Unlock()
	return mock.POSTTransactionWithBodyFunc(ctx, params, contentType, body, reqEditors...)
}

// POSTTransactionWithBodyCalls gets all the calls that were made to POSTTransactionWithBody.
// Check the length with:
//
//	len(mockedClientInterface.POSTTransactionWithBodyCalls())
func (mock *ClientInterfaceMock) POSTTransactionWithBodyCalls() []struct {
	Ctx         context.Context
	Params      *api.POSTTransactionParams
	ContentType string
	Body        io.Reader
	ReqEditors  []api.RequestEditorFn
} {
	var calls []struct {
		Ctx         context.Context
		Params      *api.POSTTransactionParams
		ContentType string
		Body        io.Reader
		ReqEditors  []api.RequestEditorFn
	}
	mock.lockPOSTTransactionWithBody.RLock()
	calls = mock.calls.POSTTransactionWithBody
	mock.lockPOSTTransactionWithBody.RUnlock()
	return calls
}

// POSTTransactionWithTextBody calls POSTTransactionWithTextBodyFunc.
func (mock *ClientInterfaceMock) POSTTransactionWithTextBody(ctx context.Context, params *api.POSTTransactionParams, body string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	if mock.POSTTransactionWithTextBodyFunc == nil {
		panic("ClientInterfaceMock.POSTTransactionWithTextBodyFunc: method is nil but ClientInterface.POSTTransactionWithTextBody was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Params     *api.POSTTransactionParams
		Body       string
		ReqEditors []api.RequestEditorFn
	}{
		Ctx:        ctx,
		Params:     params,
		Body:       body,
		ReqEditors: reqEditors,
	}
	mock.lockPOSTTransactionWithTextBody.Lock()
	mock.calls.POSTTransactionWithTextBody = append(mock.calls.POSTTransactionWithTextBody, callInfo)
	mock.lockPOSTTransactionWithTextBody.Unlock()
	return mock.POSTTransactionWithTextBodyFunc(ctx, params, body, reqEditors...)
}

// POSTTransactionWithTextBodyCalls gets all the calls that were made to POSTTransactionWithTextBody.
// Check the length with:
//
//	len(mockedClientInterface.POSTTransactionWithTextBodyCalls())
func (mock *ClientInterfaceMock) POSTTransactionWithTextBodyCalls() []struct {
	Ctx        context.Context
	Params     *api.POSTTransactionParams
	Body       string
	ReqEditors []api.RequestEditorFn
} {
	var calls []struct {
		Ctx        context.Context
		Params     *api.POSTTransactionParams
		Body       string
		ReqEditors []api.RequestEditorFn
	}
	mock.lockPOSTTransactionWithTextBody.RLock()
	calls = mock.calls.POSTTransactionWithTextBody
	mock.lockPOSTTransactionWithTextBody.RUnlock()
	return calls
}

// POSTTransactions calls POSTTransactionsFunc.
func (mock *ClientInterfaceMock) POSTTransactions(ctx context.Context, params *api.POSTTransactionsParams, body []api.TransactionRequest, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	if mock.POSTTransactionsFunc == nil {
		panic("ClientInterfaceMock.POSTTransactionsFunc: method is nil but ClientInterface.POSTTransactions was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Params     *api.POSTTransactionsParams
		Body       []api.TransactionRequest
		ReqEditors []api.RequestEditorFn
	}{
		Ctx:        ctx,
		Params:     params,
		Body:       body,
		ReqEditors: reqEditors,
	}
	mock.lockPOSTTransactions.Lock()
	mock.calls.POSTTransactions = append(mock.calls.POSTTransactions, callInfo)
	mock.lockPOSTTransactions.Unlock()
	return mock.POSTTransactionsFunc(ctx, params, body, reqEditors...)
}

// POSTTransactionsCalls gets all the calls that were made to POSTTransactions.
// Check the length with:
//
//	len(mockedClientInterface.POSTTransactionsCalls())
func (mock *ClientInterfaceMock) POSTTransactionsCalls() []struct {
	Ctx        context.Context
	Params     *api.POSTTransactionsParams
	Body       []api.TransactionRequest
	ReqEditors []api.RequestEditorFn
} {
	var calls []struct {
		Ctx        context.Context
		Params     *api.POSTTransactionsParams
		Body       []api.TransactionRequest
		ReqEditors []api.RequestEditorFn
	}
	mock.lockPOSTTransactions.RLock()
	calls = mock.calls.POSTTransactions
	mock.lockPOSTTransactions.RUnlock()
	return calls
}

// POSTTransactionsWithBody calls POSTTransactionsWithBodyFunc.
func (mock *ClientInterfaceMock) POSTTransactionsWithBody(ctx context.Context, params *api.POSTTransactionsParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	if mock.POSTTransactionsWithBodyFunc == nil {
		panic("ClientInterfaceMock.POSTTransactionsWithBodyFunc: method is nil but ClientInterface.POSTTransactionsWithBody was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Params      *api.POSTTransactionsParams
		ContentType string
		Body        io.Reader
		ReqEditors  []api.RequestEditorFn
	}{
		Ctx:         ctx,
		Params:      params,
		ContentType: contentType,
		Body:        body,
		ReqEditors:  reqEditors,
	}
	mock.lockPOSTTransactionsWithBody.Lock()
	mock.calls.POSTTransactionsWithBody = append(mock.calls.POSTTransactionsWithBody, callInfo)
	mock.lockPOSTTransactionsWithBody.Unlock()
	return mock.POSTTransactionsWithBodyFunc(ctx, params, contentType, body, reqEditors...)
}

// POSTTransactionsWithBodyCalls gets all the calls that were made to POSTTransactionsWithBody.
// Check the length with:
//
//	len(mockedClientInterface.POSTTransactionsWithBodyCalls())
func (mock *ClientInterfaceMock) POSTTransactionsWithBodyCalls() []struct {
	Ctx         context.Context
	Params      *api.POSTTransactionsParams
	ContentType string
	Body        io.Reader
	ReqEditors  []api.RequestEditorFn
} {
	var calls []struct {
		Ctx         context.Context
		Params      *api.POSTTransactionsParams
		ContentType string
		Body        io.Reader
		ReqEditors  []api.RequestEditorFn
	}
	mock.lockPOSTTransactionsWithBody.RLock()
	calls = mock.calls.POSTTransactionsWithBody
	mock.lockPOSTTransactionsWithBody.RUnlock()
	return calls
}

// POSTTransactionsWithTextBody calls POSTTransactionsWithTextBodyFunc.
func (mock *ClientInterfaceMock) POSTTransactionsWithTextBody(ctx context.Context, params *api.POSTTransactionsParams, body string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	if mock.POSTTransactionsWithTextBodyFunc == nil {
		panic("ClientInterfaceMock.POSTTransactionsWithTextBodyFunc: method is nil but ClientInterface.POSTTransactionsWithTextBody was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Params     *api.POSTTransactionsParams
		Body       string
		ReqEditors []api.RequestEditorFn
	}{
		Ctx:        ctx,
		Params:     params,
		Body:       body,
		ReqEditors: reqEditors,
	}
	mock.lockPOSTTransactionsWithTextBody.Lock()
	mock.calls.POSTTransactionsWithTextBody = append(mock.calls.POSTTransactionsWithTextBody, callInfo)
	mock.lockPOSTTransactionsWithTextBody.Unlock()
	return mock.POSTTransactionsWithTextBodyFunc(ctx, params, body, reqEditors...)
}

// POSTTransactionsWithTextBodyCalls gets all the calls that were made to POSTTransactionsWithTextBody.
// Check the length with:
//
//	len(mockedClientInterface.POSTTransactionsWithTextBodyCalls())
func (mock *ClientInterfaceMock) POSTTransactionsWithTextBodyCalls() []struct {
	Ctx        context.Context
	Params     *api.POSTTransactionsParams
	Body       string
	ReqEditors []api.RequestEditorFn
} {
	var calls []struct {
		Ctx        context.Context
		Params     *api.POSTTransactionsParams
		Body       string
		ReqEditors []api.RequestEditorFn
	}
	mock.lockPOSTTransactionsWithTextBody.RLock()
	calls = mock.calls.POSTTransactionsWithTextBody
	mock.lockPOSTTransactionsWithTextBody.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitcoin-sv/arc/internal/api"
	"sync"
)

// Ensure, that ArcDefaultHandlerHealthMock does implement api.ArcDefaultHandlerHealth.
// If this is not the case, regenerate this file with moq.
var _ api.ArcDefaultHandlerHealth = &ArcDefaultHandlerHealthMock{}

// ArcDefaultHandlerHealthMock is a mock implementation of api.ArcDefaultHandlerHealth.
//
//	func TestSomethingThatUsesArcDefaultHandlerHealth(t *testing.T) {
//
//		// make and configure a mocked api.ArcDefaultHandlerHealth
//		mockedArcDefaultHandlerHealth := &ArcDefaultHandlerHealthMock{
//			CurrentBlockHeightFunc: func() int32 {
//				panic("mock out the CurrentBlockHeight method")
//			},
//		}
//
//		// use mockedArcDefaultHandlerHealth in code that requires api.ArcDefaultHandlerHealth
//		// and then make assertions.
//
//	}
type ArcDefaultHandlerHealthMock struct {
	// CurrentBlockHeightFunc mocks the CurrentBlockHeight method.
	CurrentBlockHeightFunc func() int32

	// calls tracks calls to the methods.
	calls struct {
		// CurrentBlockHeight holds details about calls to the CurrentBlockHeight method.
		CurrentBlockHeight []struct {
		}
	}
	lockCurrentBlockHeight sync.RWMutex
}

// CurrentBlockHeight calls CurrentBlockHeightFunc.
func (mock *ArcDefaultHandlerHealthMock) CurrentBlockHeight() int32 {
	if mock.CurrentBlockHeightFunc == nil {
		panic("ArcDefaultHandlerHealthMock.CurrentBlockHeightFunc: method is nil but ArcDefaultHandlerHealth.CurrentBlockHeight was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCurrentBlockHeight.Lock()
	mock.calls.CurrentBlockHeight = append(mock.calls.CurrentBlockHeight, callInfo)
	mock.lockCurrentBlockHeight.Unlock()
	return mock.CurrentBlockHeightFunc()
}

// CurrentBlockHeightCalls gets all the calls that were made to CurrentBlockHeight.
// Check the length with:
//
//	len(mockedArcDefaultHandlerHealth.CurrentBlockHeightCalls())
func (mock *ArcDefaultHandlerHealthMock) CurrentBlockHeightCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCurrentBlockHeight.RLock()
	calls = mock.calls.CurrentBlockHeight
	mock.lockCurrentBlockHeight.RUnlock()
	return calls
}

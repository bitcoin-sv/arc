// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	context "context"
	"github.com/bitcoin-sv/arc/internal/blocktx/blocktx_api"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	sync "sync"
)

// Ensure, that BlockTxAPIClientMock does implement blocktx_api.BlockTxAPIClient.
// If this is not the case, regenerate this file with moq.
var _ blocktx_api.BlockTxAPIClient = &BlockTxAPIClientMock{}

// BlockTxAPIClientMock is a mock implementation of blocktx_api.BlockTxAPIClient.
//
//	func TestSomethingThatUsesBlockTxAPIClient(t *testing.T) {
//
//		// make and configure a mocked blocktx_api.BlockTxAPIClient
//		mockedBlockTxAPIClient := &BlockTxAPIClientMock{
//			AnyTransactionsMinedFunc: func(ctx context.Context, in *blocktx_api.Transactions, opts ...grpc.CallOption) (*blocktx_api.AnyTransactionsMinedResponse, error) {
//				panic("mock out the AnyTransactionsMined method")
//			},
//			ClearBlocksFunc: func(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.RowsAffectedResponse, error) {
//				panic("mock out the ClearBlocks method")
//			},
//			ClearRegisteredTransactionsFunc: func(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.RowsAffectedResponse, error) {
//				panic("mock out the ClearRegisteredTransactions method")
//			},
//			CurrentBlockHeightFunc: func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*blocktx_api.CurrentBlockHeightResponse, error) {
//				panic("mock out the CurrentBlockHeight method")
//			},
//			HealthFunc: func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*blocktx_api.HealthResponse, error) {
//				panic("mock out the Health method")
//			},
//			RegisterTransactionFunc: func(ctx context.Context, in *blocktx_api.Transaction, opts ...grpc.CallOption) (*emptypb.Empty, error) {
//				panic("mock out the RegisterTransaction method")
//			},
//			RegisterTransactionsFunc: func(ctx context.Context, in *blocktx_api.Transactions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
//				panic("mock out the RegisterTransactions method")
//			},
//			VerifyMerkleRootsFunc: func(ctx context.Context, in *blocktx_api.MerkleRootsVerificationRequest, opts ...grpc.CallOption) (*blocktx_api.MerkleRootVerificationResponse, error) {
//				panic("mock out the VerifyMerkleRoots method")
//			},
//		}
//
//		// use mockedBlockTxAPIClient in code that requires blocktx_api.BlockTxAPIClient
//		// and then make assertions.
//
//	}
type BlockTxAPIClientMock struct {
	// AnyTransactionsMinedFunc mocks the AnyTransactionsMined method.
	AnyTransactionsMinedFunc func(ctx context.Context, in *blocktx_api.Transactions, opts ...grpc.CallOption) (*blocktx_api.AnyTransactionsMinedResponse, error)

	// ClearBlocksFunc mocks the ClearBlocks method.
	ClearBlocksFunc func(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.RowsAffectedResponse, error)

	// ClearRegisteredTransactionsFunc mocks the ClearRegisteredTransactions method.
	ClearRegisteredTransactionsFunc func(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.RowsAffectedResponse, error)

	// CurrentBlockHeightFunc mocks the CurrentBlockHeight method.
	CurrentBlockHeightFunc func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*blocktx_api.CurrentBlockHeightResponse, error)

	// HealthFunc mocks the Health method.
	HealthFunc func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*blocktx_api.HealthResponse, error)

	// RegisterTransactionFunc mocks the RegisterTransaction method.
	RegisterTransactionFunc func(ctx context.Context, in *blocktx_api.Transaction, opts ...grpc.CallOption) (*emptypb.Empty, error)

	// RegisterTransactionsFunc mocks the RegisterTransactions method.
	RegisterTransactionsFunc func(ctx context.Context, in *blocktx_api.Transactions, opts ...grpc.CallOption) (*emptypb.Empty, error)

	// VerifyMerkleRootsFunc mocks the VerifyMerkleRoots method.
	VerifyMerkleRootsFunc func(ctx context.Context, in *blocktx_api.MerkleRootsVerificationRequest, opts ...grpc.CallOption) (*blocktx_api.MerkleRootVerificationResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// AnyTransactionsMined holds details about calls to the AnyTransactionsMined method.
		AnyTransactionsMined []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *blocktx_api.Transactions
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ClearBlocks holds details about calls to the ClearBlocks method.
		ClearBlocks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *blocktx_api.ClearData
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// ClearRegisteredTransactions holds details about calls to the ClearRegisteredTransactions method.
		ClearRegisteredTransactions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *blocktx_api.ClearData
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// CurrentBlockHeight holds details about calls to the CurrentBlockHeight method.
		CurrentBlockHeight []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *emptypb.Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Health holds details about calls to the Health method.
		Health []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *emptypb.Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// RegisterTransaction holds details about calls to the RegisterTransaction method.
		RegisterTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *blocktx_api.Transaction
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// RegisterTransactions holds details about calls to the RegisterTransactions method.
		RegisterTransactions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *blocktx_api.Transactions
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// VerifyMerkleRoots holds details about calls to the VerifyMerkleRoots method.
		VerifyMerkleRoots []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *blocktx_api.MerkleRootsVerificationRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockAnyTransactionsMined        sync.RWMutex
	lockClearBlocks                 sync.RWMutex
	lockClearRegisteredTransactions sync.RWMutex
	lockCurrentBlockHeight          sync.RWMutex
	lockHealth                      sync.RWMutex
	lockRegisterTransaction         sync.RWMutex
	lockRegisterTransactions        sync.RWMutex
	lockVerifyMerkleRoots           sync.RWMutex
}

// AnyTransactionsMined calls AnyTransactionsMinedFunc.
func (mock *BlockTxAPIClientMock) AnyTransactionsMined(ctx context.Context, in *blocktx_api.Transactions, opts ...grpc.CallOption) (*blocktx_api.AnyTransactionsMinedResponse, error) {
	if mock.AnyTransactionsMinedFunc == nil {
		panic("BlockTxAPIClientMock.AnyTransactionsMinedFunc: method is nil but BlockTxAPIClient.AnyTransactionsMined was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *blocktx_api.Transactions
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockAnyTransactionsMined.Lock()
	mock.calls.AnyTransactionsMined = append(mock.calls.AnyTransactionsMined, callInfo)
	mock.lockAnyTransactionsMined.Unlock()
	return mock.AnyTransactionsMinedFunc(ctx, in, opts...)
}

// AnyTransactionsMinedCalls gets all the calls that were made to AnyTransactionsMined.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.AnyTransactionsMinedCalls())
func (mock *BlockTxAPIClientMock) AnyTransactionsMinedCalls() []struct {
	Ctx  context.Context
	In   *blocktx_api.Transactions
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *blocktx_api.Transactions
		Opts []grpc.CallOption
	}
	mock.lockAnyTransactionsMined.RLock()
	calls = mock.calls.AnyTransactionsMined
	mock.lockAnyTransactionsMined.RUnlock()
	return calls
}

// ClearBlocks calls ClearBlocksFunc.
func (mock *BlockTxAPIClientMock) ClearBlocks(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.RowsAffectedResponse, error) {
	if mock.ClearBlocksFunc == nil {
		panic("BlockTxAPIClientMock.ClearBlocksFunc: method is nil but BlockTxAPIClient.ClearBlocks was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *blocktx_api.ClearData
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockClearBlocks.Lock()
	mock.calls.ClearBlocks = append(mock.calls.ClearBlocks, callInfo)
	mock.lockClearBlocks.Unlock()
	return mock.ClearBlocksFunc(ctx, in, opts...)
}

// ClearBlocksCalls gets all the calls that were made to ClearBlocks.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.ClearBlocksCalls())
func (mock *BlockTxAPIClientMock) ClearBlocksCalls() []struct {
	Ctx  context.Context
	In   *blocktx_api.ClearData
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *blocktx_api.ClearData
		Opts []grpc.CallOption
	}
	mock.lockClearBlocks.RLock()
	calls = mock.calls.ClearBlocks
	mock.lockClearBlocks.RUnlock()
	return calls
}

// ClearRegisteredTransactions calls ClearRegisteredTransactionsFunc.
func (mock *BlockTxAPIClientMock) ClearRegisteredTransactions(ctx context.Context, in *blocktx_api.ClearData, opts ...grpc.CallOption) (*blocktx_api.RowsAffectedResponse, error) {
	if mock.ClearRegisteredTransactionsFunc == nil {
		panic("BlockTxAPIClientMock.ClearRegisteredTransactionsFunc: method is nil but BlockTxAPIClient.ClearRegisteredTransactions was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *blocktx_api.ClearData
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockClearRegisteredTransactions.Lock()
	mock.calls.ClearRegisteredTransactions = append(mock.calls.ClearRegisteredTransactions, callInfo)
	mock.lockClearRegisteredTransactions.Unlock()
	return mock.ClearRegisteredTransactionsFunc(ctx, in, opts...)
}

// ClearRegisteredTransactionsCalls gets all the calls that were made to ClearRegisteredTransactions.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.ClearRegisteredTransactionsCalls())
func (mock *BlockTxAPIClientMock) ClearRegisteredTransactionsCalls() []struct {
	Ctx  context.Context
	In   *blocktx_api.ClearData
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *blocktx_api.ClearData
		Opts []grpc.CallOption
	}
	mock.lockClearRegisteredTransactions.RLock()
	calls = mock.calls.ClearRegisteredTransactions
	mock.lockClearRegisteredTransactions.RUnlock()
	return calls
}

// CurrentBlockHeight calls CurrentBlockHeightFunc.
func (mock *BlockTxAPIClientMock) CurrentBlockHeight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*blocktx_api.CurrentBlockHeightResponse, error) {
	if mock.CurrentBlockHeightFunc == nil {
		panic("BlockTxAPIClientMock.CurrentBlockHeightFunc: method is nil but BlockTxAPIClient.CurrentBlockHeight was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockCurrentBlockHeight.Lock()
	mock.calls.CurrentBlockHeight = append(mock.calls.CurrentBlockHeight, callInfo)
	mock.lockCurrentBlockHeight.Unlock()
	return mock.CurrentBlockHeightFunc(ctx, in, opts...)
}

// CurrentBlockHeightCalls gets all the calls that were made to CurrentBlockHeight.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.CurrentBlockHeightCalls())
func (mock *BlockTxAPIClientMock) CurrentBlockHeightCalls() []struct {
	Ctx  context.Context
	In   *emptypb.Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}
	mock.lockCurrentBlockHeight.RLock()
	calls = mock.calls.CurrentBlockHeight
	mock.lockCurrentBlockHeight.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *BlockTxAPIClientMock) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*blocktx_api.HealthResponse, error) {
	if mock.HealthFunc == nil {
		panic("BlockTxAPIClientMock.HealthFunc: method is nil but BlockTxAPIClient.Health was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc(ctx, in, opts...)
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.HealthCalls())
func (mock *BlockTxAPIClientMock) HealthCalls() []struct {
	Ctx  context.Context
	In   *emptypb.Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// RegisterTransaction calls RegisterTransactionFunc.
func (mock *BlockTxAPIClientMock) RegisterTransaction(ctx context.Context, in *blocktx_api.Transaction, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	if mock.RegisterTransactionFunc == nil {
		panic("BlockTxAPIClientMock.RegisterTransactionFunc: method is nil but BlockTxAPIClient.RegisterTransaction was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *blocktx_api.Transaction
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRegisterTransaction.Lock()
	mock.calls.RegisterTransaction = append(mock.calls.RegisterTransaction, callInfo)
	mock.lockRegisterTransaction.Unlock()
	return mock.RegisterTransactionFunc(ctx, in, opts...)
}

// RegisterTransactionCalls gets all the calls that were made to RegisterTransaction.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.RegisterTransactionCalls())
func (mock *BlockTxAPIClientMock) RegisterTransactionCalls() []struct {
	Ctx  context.Context
	In   *blocktx_api.Transaction
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *blocktx_api.Transaction
		Opts []grpc.CallOption
	}
	mock.lockRegisterTransaction.RLock()
	calls = mock.calls.RegisterTransaction
	mock.lockRegisterTransaction.RUnlock()
	return calls
}

// RegisterTransactions calls RegisterTransactionsFunc.
func (mock *BlockTxAPIClientMock) RegisterTransactions(ctx context.Context, in *blocktx_api.Transactions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	if mock.RegisterTransactionsFunc == nil {
		panic("BlockTxAPIClientMock.RegisterTransactionsFunc: method is nil but BlockTxAPIClient.RegisterTransactions was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *blocktx_api.Transactions
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRegisterTransactions.Lock()
	mock.calls.RegisterTransactions = append(mock.calls.RegisterTransactions, callInfo)
	mock.lockRegisterTransactions.Unlock()
	return mock.RegisterTransactionsFunc(ctx, in, opts...)
}

// RegisterTransactionsCalls gets all the calls that were made to RegisterTransactions.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.RegisterTransactionsCalls())
func (mock *BlockTxAPIClientMock) RegisterTransactionsCalls() []struct {
	Ctx  context.Context
	In   *blocktx_api.Transactions
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *blocktx_api.Transactions
		Opts []grpc.CallOption
	}
	mock.lockRegisterTransactions.RLock()
	calls = mock.calls.RegisterTransactions
	mock.lockRegisterTransactions.RUnlock()
	return calls
}

// VerifyMerkleRoots calls VerifyMerkleRootsFunc.
func (mock *BlockTxAPIClientMock) VerifyMerkleRoots(ctx context.Context, in *blocktx_api.MerkleRootsVerificationRequest, opts ...grpc.CallOption) (*blocktx_api.MerkleRootVerificationResponse, error) {
	if mock.VerifyMerkleRootsFunc == nil {
		panic("BlockTxAPIClientMock.VerifyMerkleRootsFunc: method is nil but BlockTxAPIClient.VerifyMerkleRoots was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *blocktx_api.MerkleRootsVerificationRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockVerifyMerkleRoots.Lock()
	mock.calls.VerifyMerkleRoots = append(mock.calls.VerifyMerkleRoots, callInfo)
	mock.lockVerifyMerkleRoots.Unlock()
	return mock.VerifyMerkleRootsFunc(ctx, in, opts...)
}

// VerifyMerkleRootsCalls gets all the calls that were made to VerifyMerkleRoots.
// Check the length with:
//
//	len(mockedBlockTxAPIClient.VerifyMerkleRootsCalls())
func (mock *BlockTxAPIClientMock) VerifyMerkleRootsCalls() []struct {
	Ctx  context.Context
	In   *blocktx_api.MerkleRootsVerificationRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *blocktx_api.MerkleRootsVerificationRequest
		Opts []grpc.CallOption
	}
	mock.lockVerifyMerkleRoots.RLock()
	calls = mock.calls.VerifyMerkleRoots
	mock.lockVerifyMerkleRoots.RUnlock()
	return calls
}

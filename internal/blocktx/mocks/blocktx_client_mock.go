// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/blocktx"
	"github.com/bitcoin-sv/arc/internal/blocktx/blocktx_api"
	"sync"
)

// Ensure, that ClientMock does implement blocktx.Client.
// If this is not the case, regenerate this file with moq.
var _ blocktx.Client = &ClientMock{}

// ClientMock is a mock implementation of blocktx.Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked blocktx.Client
//		mockedClient := &ClientMock{
//			CurrentBlockHeightFunc: func(ctx context.Context) (*blocktx_api.CurrentBlockHeightResponse, error) {
//				panic("mock out the CurrentBlockHeight method")
//			},
//			IsCompetingTransactionMinedFunc: func(ctx context.Context, hash [][]byte) (bool, error) {
//				panic("mock out the IsCompetingTransactionMined method")
//			},
//			RegisterTransactionFunc: func(ctx context.Context, hash []byte) error {
//				panic("mock out the RegisterTransaction method")
//			},
//			RegisterTransactionsFunc: func(ctx context.Context, hashes [][]byte) error {
//				panic("mock out the RegisterTransactions method")
//			},
//			VerifyMerkleRootsFunc: func(ctx context.Context, merkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest) ([]uint64, error) {
//				panic("mock out the VerifyMerkleRoots method")
//			},
//		}
//
//		// use mockedClient in code that requires blocktx.Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// CurrentBlockHeightFunc mocks the CurrentBlockHeight method.
	CurrentBlockHeightFunc func(ctx context.Context) (*blocktx_api.CurrentBlockHeightResponse, error)

	// IsCompetingTransactionMinedFunc mocks the IsCompetingTransactionMined method.
	IsCompetingTransactionMinedFunc func(ctx context.Context, hash [][]byte) (bool, error)

	// RegisterTransactionFunc mocks the RegisterTransaction method.
	RegisterTransactionFunc func(ctx context.Context, hash []byte) error

	// RegisterTransactionsFunc mocks the RegisterTransactions method.
	RegisterTransactionsFunc func(ctx context.Context, hashes [][]byte) error

	// VerifyMerkleRootsFunc mocks the VerifyMerkleRoots method.
	VerifyMerkleRootsFunc func(ctx context.Context, merkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest) ([]uint64, error)

	// calls tracks calls to the methods.
	calls struct {
		// CurrentBlockHeight holds details about calls to the CurrentBlockHeight method.
		CurrentBlockHeight []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// IsCompetingTransactionMined holds details about calls to the IsCompetingTransactionMined method.
		IsCompetingTransactionMined []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Hash is the hash argument value.
			Hash [][]byte
		}
		// RegisterTransaction holds details about calls to the RegisterTransaction method.
		RegisterTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Hash is the hash argument value.
			Hash []byte
		}
		// RegisterTransactions holds details about calls to the RegisterTransactions method.
		RegisterTransactions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Hashes is the hashes argument value.
			Hashes [][]byte
		}
		// VerifyMerkleRoots holds details about calls to the VerifyMerkleRoots method.
		VerifyMerkleRoots []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MerkleRootVerificationRequest is the merkleRootVerificationRequest argument value.
			MerkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest
		}
	}
	lockCurrentBlockHeight          sync.RWMutex
	lockIsCompetingTransactionMined sync.RWMutex
	lockRegisterTransaction         sync.RWMutex
	lockRegisterTransactions        sync.RWMutex
	lockVerifyMerkleRoots           sync.RWMutex
}

// CurrentBlockHeight calls CurrentBlockHeightFunc.
func (mock *ClientMock) CurrentBlockHeight(ctx context.Context) (*blocktx_api.CurrentBlockHeightResponse, error) {
	if mock.CurrentBlockHeightFunc == nil {
		panic("ClientMock.CurrentBlockHeightFunc: method is nil but Client.CurrentBlockHeight was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCurrentBlockHeight.Lock()
	mock.calls.CurrentBlockHeight = append(mock.calls.CurrentBlockHeight, callInfo)
	mock.lockCurrentBlockHeight.Unlock()
	return mock.CurrentBlockHeightFunc(ctx)
}

// CurrentBlockHeightCalls gets all the calls that were made to CurrentBlockHeight.
// Check the length with:
//
//	len(mockedClient.CurrentBlockHeightCalls())
func (mock *ClientMock) CurrentBlockHeightCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCurrentBlockHeight.RLock()
	calls = mock.calls.CurrentBlockHeight
	mock.lockCurrentBlockHeight.RUnlock()
	return calls
}

// IsCompetingTransactionMined calls IsCompetingTransactionMinedFunc.
func (mock *ClientMock) IsCompetingTransactionMined(ctx context.Context, hash [][]byte) (bool, error) {
	if mock.IsCompetingTransactionMinedFunc == nil {
		panic("ClientMock.IsCompetingTransactionMinedFunc: method is nil but Client.IsCompetingTransactionMined was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Hash [][]byte
	}{
		Ctx:  ctx,
		Hash: hash,
	}
	mock.lockIsCompetingTransactionMined.Lock()
	mock.calls.IsCompetingTransactionMined = append(mock.calls.IsCompetingTransactionMined, callInfo)
	mock.lockIsCompetingTransactionMined.Unlock()
	return mock.IsCompetingTransactionMinedFunc(ctx, hash)
}

// IsCompetingTransactionMinedCalls gets all the calls that were made to IsCompetingTransactionMined.
// Check the length with:
//
//	len(mockedClient.IsCompetingTransactionMinedCalls())
func (mock *ClientMock) IsCompetingTransactionMinedCalls() []struct {
	Ctx  context.Context
	Hash [][]byte
} {
	var calls []struct {
		Ctx  context.Context
		Hash [][]byte
	}
	mock.lockIsCompetingTransactionMined.RLock()
	calls = mock.calls.IsCompetingTransactionMined
	mock.lockIsCompetingTransactionMined.RUnlock()
	return calls
}

// RegisterTransaction calls RegisterTransactionFunc.
func (mock *ClientMock) RegisterTransaction(ctx context.Context, hash []byte) error {
	if mock.RegisterTransactionFunc == nil {
		panic("ClientMock.RegisterTransactionFunc: method is nil but Client.RegisterTransaction was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Hash []byte
	}{
		Ctx:  ctx,
		Hash: hash,
	}
	mock.lockRegisterTransaction.Lock()
	mock.calls.RegisterTransaction = append(mock.calls.RegisterTransaction, callInfo)
	mock.lockRegisterTransaction.Unlock()
	return mock.RegisterTransactionFunc(ctx, hash)
}

// RegisterTransactionCalls gets all the calls that were made to RegisterTransaction.
// Check the length with:
//
//	len(mockedClient.RegisterTransactionCalls())
func (mock *ClientMock) RegisterTransactionCalls() []struct {
	Ctx  context.Context
	Hash []byte
} {
	var calls []struct {
		Ctx  context.Context
		Hash []byte
	}
	mock.lockRegisterTransaction.RLock()
	calls = mock.calls.RegisterTransaction
	mock.lockRegisterTransaction.RUnlock()
	return calls
}

// RegisterTransactions calls RegisterTransactionsFunc.
func (mock *ClientMock) RegisterTransactions(ctx context.Context, hashes [][]byte) error {
	if mock.RegisterTransactionsFunc == nil {
		panic("ClientMock.RegisterTransactionsFunc: method is nil but Client.RegisterTransactions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Hashes [][]byte
	}{
		Ctx:    ctx,
		Hashes: hashes,
	}
	mock.lockRegisterTransactions.Lock()
	mock.calls.RegisterTransactions = append(mock.calls.RegisterTransactions, callInfo)
	mock.lockRegisterTransactions.Unlock()
	return mock.RegisterTransactionsFunc(ctx, hashes)
}

// RegisterTransactionsCalls gets all the calls that were made to RegisterTransactions.
// Check the length with:
//
//	len(mockedClient.RegisterTransactionsCalls())
func (mock *ClientMock) RegisterTransactionsCalls() []struct {
	Ctx    context.Context
	Hashes [][]byte
} {
	var calls []struct {
		Ctx    context.Context
		Hashes [][]byte
	}
	mock.lockRegisterTransactions.RLock()
	calls = mock.calls.RegisterTransactions
	mock.lockRegisterTransactions.RUnlock()
	return calls
}

// VerifyMerkleRoots calls VerifyMerkleRootsFunc.
func (mock *ClientMock) VerifyMerkleRoots(ctx context.Context, merkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest) ([]uint64, error) {
	if mock.VerifyMerkleRootsFunc == nil {
		panic("ClientMock.VerifyMerkleRootsFunc: method is nil but Client.VerifyMerkleRoots was just called")
	}
	callInfo := struct {
		Ctx                           context.Context
		MerkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest
	}{
		Ctx:                           ctx,
		MerkleRootVerificationRequest: merkleRootVerificationRequest,
	}
	mock.lockVerifyMerkleRoots.Lock()
	mock.calls.VerifyMerkleRoots = append(mock.calls.VerifyMerkleRoots, callInfo)
	mock.lockVerifyMerkleRoots.Unlock()
	return mock.VerifyMerkleRootsFunc(ctx, merkleRootVerificationRequest)
}

// VerifyMerkleRootsCalls gets all the calls that were made to VerifyMerkleRoots.
// Check the length with:
//
//	len(mockedClient.VerifyMerkleRootsCalls())
func (mock *ClientMock) VerifyMerkleRootsCalls() []struct {
	Ctx                           context.Context
	MerkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest
} {
	var calls []struct {
		Ctx                           context.Context
		MerkleRootVerificationRequest []blocktx.MerkleRootVerificationRequest
	}
	mock.lockVerifyMerkleRoots.RLock()
	calls = mock.calls.VerifyMerkleRoots
	mock.lockVerifyMerkleRoots.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitcoin-sv/arc/internal/blocktx"
	"sync"
)

// Ensure, that PeerManagerMock does implement blocktx.PeerManager.
// If this is not the case, regenerate this file with moq.
var _ blocktx.PeerManager = &PeerManagerMock{}

// PeerManagerMock is a mock implementation of blocktx.PeerManager.
//
//	func TestSomethingThatUsesPeerManager(t *testing.T) {
//
//		// make and configure a mocked blocktx.PeerManager
//		mockedPeerManager := &PeerManagerMock{
//			CountConnectedPeersFunc: func() uint {
//				panic("mock out the CountConnectedPeers method")
//			},
//		}
//
//		// use mockedPeerManager in code that requires blocktx.PeerManager
//		// and then make assertions.
//
//	}
type PeerManagerMock struct {
	// CountConnectedPeersFunc mocks the CountConnectedPeers method.
	CountConnectedPeersFunc func() uint

	// calls tracks calls to the methods.
	calls struct {
		// CountConnectedPeers holds details about calls to the CountConnectedPeers method.
		CountConnectedPeers []struct {
		}
	}
	lockCountConnectedPeers sync.RWMutex
}

// CountConnectedPeers calls CountConnectedPeersFunc.
func (mock *PeerManagerMock) CountConnectedPeers() uint {
	if mock.CountConnectedPeersFunc == nil {
		panic("PeerManagerMock.CountConnectedPeersFunc: method is nil but PeerManager.CountConnectedPeers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCountConnectedPeers.Lock()
	mock.calls.CountConnectedPeers = append(mock.calls.CountConnectedPeers, callInfo)
	mock.lockCountConnectedPeers.Unlock()
	return mock.CountConnectedPeersFunc()
}

// CountConnectedPeersCalls gets all the calls that were made to CountConnectedPeers.
// Check the length with:
//
//	len(mockedPeerManager.CountConnectedPeersCalls())
func (mock *PeerManagerMock) CountConnectedPeersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCountConnectedPeers.RLock()
	calls = mock.calls.CountConnectedPeers
	mock.lockCountConnectedPeers.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitcoin-sv/arc/internal/blocktx"
	"sync"
)

// Ensure, that ProcessorIMock does implement blocktx.ProcessorI.
// If this is not the case, regenerate this file with moq.
var _ blocktx.ProcessorI = &ProcessorIMock{}

// ProcessorIMock is a mock implementation of blocktx.ProcessorI.
//
//	func TestSomethingThatUsesProcessorI(t *testing.T) {
//
//		// make and configure a mocked blocktx.ProcessorI
//		mockedProcessorI := &ProcessorIMock{
//			RegisterTransactionFunc: func(txHash []byte)  {
//				panic("mock out the RegisterTransaction method")
//			},
//		}
//
//		// use mockedProcessorI in code that requires blocktx.ProcessorI
//		// and then make assertions.
//
//	}
type ProcessorIMock struct {
	// RegisterTransactionFunc mocks the RegisterTransaction method.
	RegisterTransactionFunc func(txHash []byte)

	// calls tracks calls to the methods.
	calls struct {
		// RegisterTransaction holds details about calls to the RegisterTransaction method.
		RegisterTransaction []struct {
			// TxHash is the txHash argument value.
			TxHash []byte
		}
	}
	lockRegisterTransaction sync.RWMutex
}

// RegisterTransaction calls RegisterTransactionFunc.
func (mock *ProcessorIMock) RegisterTransaction(txHash []byte) {
	if mock.RegisterTransactionFunc == nil {
		panic("ProcessorIMock.RegisterTransactionFunc: method is nil but ProcessorI.RegisterTransaction was just called")
	}
	callInfo := struct {
		TxHash []byte
	}{
		TxHash: txHash,
	}
	mock.lockRegisterTransaction.Lock()
	mock.calls.RegisterTransaction = append(mock.calls.RegisterTransaction, callInfo)
	mock.lockRegisterTransaction.Unlock()
	mock.RegisterTransactionFunc(txHash)
}

// RegisterTransactionCalls gets all the calls that were made to RegisterTransaction.
// Check the length with:
//
//	len(mockedProcessorI.RegisterTransactionCalls())
func (mock *ProcessorIMock) RegisterTransactionCalls() []struct {
	TxHash []byte
} {
	var calls []struct {
		TxHash []byte
	}
	mock.lockRegisterTransaction.RLock()
	calls = mock.calls.RegisterTransaction
	mock.lockRegisterTransaction.RUnlock()
	return calls
}

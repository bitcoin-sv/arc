// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/broadcaster"
	"github.com/bitcoin-sv/arc/internal/metamorph/metamorph_api"
	sdkTx "github.com/bsv-blockchain/go-sdk/transaction"
	"sync"
)

// Ensure, that ArcClientMock does implement broadcaster.ArcClient.
// If this is not the case, regenerate this file with moq.
var _ broadcaster.ArcClient = &ArcClientMock{}

// ArcClientMock is a mock implementation of broadcaster.ArcClient.
//
//	func TestSomethingThatUsesArcClient(t *testing.T) {
//
//		// make and configure a mocked broadcaster.ArcClient
//		mockedArcClient := &ArcClientMock{
//			BroadcastTransactionFunc: func(ctx context.Context, tx *sdkTx.Transaction, waitForStatus metamorph_api.Status, callbackURL string) (*metamorph_api.TransactionStatus, error) {
//				panic("mock out the BroadcastTransaction method")
//			},
//			BroadcastTransactionsFunc: func(ctx context.Context, txs sdkTx.Transactions, waitForStatus metamorph_api.Status, callbackURL string, callbackToken string, fullStatusUpdates bool, skipFeeValidation bool) ([]*metamorph_api.TransactionStatus, error) {
//				panic("mock out the BroadcastTransactions method")
//			},
//			GetTransactionStatusFunc: func(ctx context.Context, txID string) (*metamorph_api.TransactionStatus, error) {
//				panic("mock out the GetTransactionStatus method")
//			},
//		}
//
//		// use mockedArcClient in code that requires broadcaster.ArcClient
//		// and then make assertions.
//
//	}
type ArcClientMock struct {
	// BroadcastTransactionFunc mocks the BroadcastTransaction method.
	BroadcastTransactionFunc func(ctx context.Context, tx *sdkTx.Transaction, waitForStatus metamorph_api.Status, callbackURL string) (*metamorph_api.TransactionStatus, error)

	// BroadcastTransactionsFunc mocks the BroadcastTransactions method.
	BroadcastTransactionsFunc func(ctx context.Context, txs sdkTx.Transactions, waitForStatus metamorph_api.Status, callbackURL string, callbackToken string, fullStatusUpdates bool, skipFeeValidation bool) ([]*metamorph_api.TransactionStatus, error)

	// GetTransactionStatusFunc mocks the GetTransactionStatus method.
	GetTransactionStatusFunc func(ctx context.Context, txID string) (*metamorph_api.TransactionStatus, error)

	// calls tracks calls to the methods.
	calls struct {
		// BroadcastTransaction holds details about calls to the BroadcastTransaction method.
		BroadcastTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx *sdkTx.Transaction
			// WaitForStatus is the waitForStatus argument value.
			WaitForStatus metamorph_api.Status
			// CallbackURL is the callbackURL argument value.
			CallbackURL string
		}
		// BroadcastTransactions holds details about calls to the BroadcastTransactions method.
		BroadcastTransactions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Txs is the txs argument value.
			Txs sdkTx.Transactions
			// WaitForStatus is the waitForStatus argument value.
			WaitForStatus metamorph_api.Status
			// CallbackURL is the callbackURL argument value.
			CallbackURL string
			// CallbackToken is the callbackToken argument value.
			CallbackToken string
			// FullStatusUpdates is the fullStatusUpdates argument value.
			FullStatusUpdates bool
			// SkipFeeValidation is the skipFeeValidation argument value.
			SkipFeeValidation bool
		}
		// GetTransactionStatus holds details about calls to the GetTransactionStatus method.
		GetTransactionStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TxID is the txID argument value.
			TxID string
		}
	}
	lockBroadcastTransaction  sync.RWMutex
	lockBroadcastTransactions sync.RWMutex
	lockGetTransactionStatus  sync.RWMutex
}

// BroadcastTransaction calls BroadcastTransactionFunc.
func (mock *ArcClientMock) BroadcastTransaction(ctx context.Context, tx *sdkTx.Transaction, waitForStatus metamorph_api.Status, callbackURL string) (*metamorph_api.TransactionStatus, error) {
	if mock.BroadcastTransactionFunc == nil {
		panic("ArcClientMock.BroadcastTransactionFunc: method is nil but ArcClient.BroadcastTransaction was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Tx            *sdkTx.Transaction
		WaitForStatus metamorph_api.Status
		CallbackURL   string
	}{
		Ctx:           ctx,
		Tx:            tx,
		WaitForStatus: waitForStatus,
		CallbackURL:   callbackURL,
	}
	mock.lockBroadcastTransaction.Lock()
	mock.calls.BroadcastTransaction = append(mock.calls.BroadcastTransaction, callInfo)
	mock.lockBroadcastTransaction.Unlock()
	return mock.BroadcastTransactionFunc(ctx, tx, waitForStatus, callbackURL)
}

// BroadcastTransactionCalls gets all the calls that were made to BroadcastTransaction.
// Check the length with:
//
//	len(mockedArcClient.BroadcastTransactionCalls())
func (mock *ArcClientMock) BroadcastTransactionCalls() []struct {
	Ctx           context.Context
	Tx            *sdkTx.Transaction
	WaitForStatus metamorph_api.Status
	CallbackURL   string
} {
	var calls []struct {
		Ctx           context.Context
		Tx            *sdkTx.Transaction
		WaitForStatus metamorph_api.Status
		CallbackURL   string
	}
	mock.lockBroadcastTransaction.RLock()
	calls = mock.calls.BroadcastTransaction
	mock.lockBroadcastTransaction.RUnlock()
	return calls
}

// BroadcastTransactions calls BroadcastTransactionsFunc.
func (mock *ArcClientMock) BroadcastTransactions(ctx context.Context, txs sdkTx.Transactions, waitForStatus metamorph_api.Status, callbackURL string, callbackToken string, fullStatusUpdates bool, skipFeeValidation bool) ([]*metamorph_api.TransactionStatus, error) {
	if mock.BroadcastTransactionsFunc == nil {
		panic("ArcClientMock.BroadcastTransactionsFunc: method is nil but ArcClient.BroadcastTransactions was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Txs               sdkTx.Transactions
		WaitForStatus     metamorph_api.Status
		CallbackURL       string
		CallbackToken     string
		FullStatusUpdates bool
		SkipFeeValidation bool
	}{
		Ctx:               ctx,
		Txs:               txs,
		WaitForStatus:     waitForStatus,
		CallbackURL:       callbackURL,
		CallbackToken:     callbackToken,
		FullStatusUpdates: fullStatusUpdates,
		SkipFeeValidation: skipFeeValidation,
	}
	mock.lockBroadcastTransactions.Lock()
	mock.calls.BroadcastTransactions = append(mock.calls.BroadcastTransactions, callInfo)
	mock.lockBroadcastTransactions.Unlock()
	return mock.BroadcastTransactionsFunc(ctx, txs, waitForStatus, callbackURL, callbackToken, fullStatusUpdates, skipFeeValidation)
}

// BroadcastTransactionsCalls gets all the calls that were made to BroadcastTransactions.
// Check the length with:
//
//	len(mockedArcClient.BroadcastTransactionsCalls())
func (mock *ArcClientMock) BroadcastTransactionsCalls() []struct {
	Ctx               context.Context
	Txs               sdkTx.Transactions
	WaitForStatus     metamorph_api.Status
	CallbackURL       string
	CallbackToken     string
	FullStatusUpdates bool
	SkipFeeValidation bool
} {
	var calls []struct {
		Ctx               context.Context
		Txs               sdkTx.Transactions
		WaitForStatus     metamorph_api.Status
		CallbackURL       string
		CallbackToken     string
		FullStatusUpdates bool
		SkipFeeValidation bool
	}
	mock.lockBroadcastTransactions.RLock()
	calls = mock.calls.BroadcastTransactions
	mock.lockBroadcastTransactions.RUnlock()
	return calls
}

// GetTransactionStatus calls GetTransactionStatusFunc.
func (mock *ArcClientMock) GetTransactionStatus(ctx context.Context, txID string) (*metamorph_api.TransactionStatus, error) {
	if mock.GetTransactionStatusFunc == nil {
		panic("ArcClientMock.GetTransactionStatusFunc: method is nil but ArcClient.GetTransactionStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		TxID string
	}{
		Ctx:  ctx,
		TxID: txID,
	}
	mock.lockGetTransactionStatus.Lock()
	mock.calls.GetTransactionStatus = append(mock.calls.GetTransactionStatus, callInfo)
	mock.lockGetTransactionStatus.Unlock()
	return mock.GetTransactionStatusFunc(ctx, txID)
}

// GetTransactionStatusCalls gets all the calls that were made to GetTransactionStatus.
// Check the length with:
//
//	len(mockedArcClient.GetTransactionStatusCalls())
func (mock *ArcClientMock) GetTransactionStatusCalls() []struct {
	Ctx  context.Context
	TxID string
} {
	var calls []struct {
		Ctx  context.Context
		TxID string
	}
	mock.lockGetTransactionStatus.RLock()
	calls = mock.calls.GetTransactionStatus
	mock.lockGetTransactionStatus.RUnlock()
	return calls
}

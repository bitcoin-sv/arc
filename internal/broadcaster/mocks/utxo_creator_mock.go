// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitcoin-sv/arc/internal/broadcaster"
	"sync"
)

// Ensure, that CreatorMock does implement broadcaster.Creator.
// If this is not the case, regenerate this file with moq.
var _ broadcaster.Creator = &CreatorMock{}

// CreatorMock is a mock implementation of broadcaster.Creator.
//
//	func TestSomethingThatUsesCreator(t *testing.T) {
//
//		// make and configure a mocked broadcaster.Creator
//		mockedCreator := &CreatorMock{
//			ShutdownFunc: func()  {
//				panic("mock out the Shutdown method")
//			},
//			StartFunc: func(outputs uint64, satoshisPerOutput uint64) error {
//				panic("mock out the Start method")
//			},
//			WaitFunc: func()  {
//				panic("mock out the Wait method")
//			},
//		}
//
//		// use mockedCreator in code that requires broadcaster.Creator
//		// and then make assertions.
//
//	}
type CreatorMock struct {
	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func()

	// StartFunc mocks the Start method.
	StartFunc func(outputs uint64, satoshisPerOutput uint64) error

	// WaitFunc mocks the Wait method.
	WaitFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Outputs is the outputs argument value.
			Outputs uint64
			// SatoshisPerOutput is the satoshisPerOutput argument value.
			SatoshisPerOutput uint64
		}
		// Wait holds details about calls to the Wait method.
		Wait []struct {
		}
	}
	lockShutdown sync.RWMutex
	lockStart    sync.RWMutex
	lockWait     sync.RWMutex
}

// Shutdown calls ShutdownFunc.
func (mock *CreatorMock) Shutdown() {
	if mock.ShutdownFunc == nil {
		panic("CreatorMock.ShutdownFunc: method is nil but Creator.Shutdown was just called")
	}
	callInfo := struct {
	}{}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	mock.ShutdownFunc()
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//
//	len(mockedCreator.ShutdownCalls())
func (mock *CreatorMock) ShutdownCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *CreatorMock) Start(outputs uint64, satoshisPerOutput uint64) error {
	if mock.StartFunc == nil {
		panic("CreatorMock.StartFunc: method is nil but Creator.Start was just called")
	}
	callInfo := struct {
		Outputs           uint64
		SatoshisPerOutput uint64
	}{
		Outputs:           outputs,
		SatoshisPerOutput: satoshisPerOutput,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(outputs, satoshisPerOutput)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedCreator.StartCalls())
func (mock *CreatorMock) StartCalls() []struct {
	Outputs           uint64
	SatoshisPerOutput uint64
} {
	var calls []struct {
		Outputs           uint64
		SatoshisPerOutput uint64
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Wait calls WaitFunc.
func (mock *CreatorMock) Wait() {
	if mock.WaitFunc == nil {
		panic("CreatorMock.WaitFunc: method is nil but Creator.Wait was just called")
	}
	callInfo := struct {
	}{}
	mock.lockWait.Lock()
	mock.calls.Wait = append(mock.calls.Wait, callInfo)
	mock.lockWait.Unlock()
	mock.WaitFunc()
}

// WaitCalls gets all the calls that were made to Wait.
// Check the length with:
//
//	len(mockedCreator.WaitCalls())
func (mock *CreatorMock) WaitCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockWait.RLock()
	calls = mock.calls.Wait
	mock.lockWait.RUnlock()
	return calls
}

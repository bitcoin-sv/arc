// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	context "context"
	"github.com/bitcoin-sv/arc/internal/callbacker/callbacker_api"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	sync "sync"
)

// Ensure, that CallbackerAPIClientMock does implement callbacker_api.CallbackerAPIClient.
// If this is not the case, regenerate this file with moq.
var _ callbacker_api.CallbackerAPIClient = &CallbackerAPIClientMock{}

// CallbackerAPIClientMock is a mock implementation of callbacker_api.CallbackerAPIClient.
//
//	func TestSomethingThatUsesCallbackerAPIClient(t *testing.T) {
//
//		// make and configure a mocked callbacker_api.CallbackerAPIClient
//		mockedCallbackerAPIClient := &CallbackerAPIClientMock{
//			DeleteURLMappingFunc: func(ctx context.Context, in *callbacker_api.DeleteURLMappingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
//				panic("mock out the DeleteURLMapping method")
//			},
//			HealthFunc: func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*callbacker_api.HealthResponse, error) {
//				panic("mock out the Health method")
//			},
//			SendCallbackFunc: func(ctx context.Context, in *callbacker_api.SendCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
//				panic("mock out the SendCallback method")
//			},
//		}
//
//		// use mockedCallbackerAPIClient in code that requires callbacker_api.CallbackerAPIClient
//		// and then make assertions.
//
//	}
type CallbackerAPIClientMock struct {
	// DeleteURLMappingFunc mocks the DeleteURLMapping method.
	DeleteURLMappingFunc func(ctx context.Context, in *callbacker_api.DeleteURLMappingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)

	// HealthFunc mocks the Health method.
	HealthFunc func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*callbacker_api.HealthResponse, error)

	// SendCallbackFunc mocks the SendCallback method.
	SendCallbackFunc func(ctx context.Context, in *callbacker_api.SendCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteURLMapping holds details about calls to the DeleteURLMapping method.
		DeleteURLMapping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *callbacker_api.DeleteURLMappingRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Health holds details about calls to the Health method.
		Health []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *emptypb.Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// SendCallback holds details about calls to the SendCallback method.
		SendCallback []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *callbacker_api.SendCallbackRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockDeleteURLMapping sync.RWMutex
	lockHealth           sync.RWMutex
	lockSendCallback     sync.RWMutex
}

// DeleteURLMapping calls DeleteURLMappingFunc.
func (mock *CallbackerAPIClientMock) DeleteURLMapping(ctx context.Context, in *callbacker_api.DeleteURLMappingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	if mock.DeleteURLMappingFunc == nil {
		panic("CallbackerAPIClientMock.DeleteURLMappingFunc: method is nil but CallbackerAPIClient.DeleteURLMapping was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *callbacker_api.DeleteURLMappingRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDeleteURLMapping.Lock()
	mock.calls.DeleteURLMapping = append(mock.calls.DeleteURLMapping, callInfo)
	mock.lockDeleteURLMapping.Unlock()
	return mock.DeleteURLMappingFunc(ctx, in, opts...)
}

// DeleteURLMappingCalls gets all the calls that were made to DeleteURLMapping.
// Check the length with:
//
//	len(mockedCallbackerAPIClient.DeleteURLMappingCalls())
func (mock *CallbackerAPIClientMock) DeleteURLMappingCalls() []struct {
	Ctx  context.Context
	In   *callbacker_api.DeleteURLMappingRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *callbacker_api.DeleteURLMappingRequest
		Opts []grpc.CallOption
	}
	mock.lockDeleteURLMapping.RLock()
	calls = mock.calls.DeleteURLMapping
	mock.lockDeleteURLMapping.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *CallbackerAPIClientMock) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*callbacker_api.HealthResponse, error) {
	if mock.HealthFunc == nil {
		panic("CallbackerAPIClientMock.HealthFunc: method is nil but CallbackerAPIClient.Health was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc(ctx, in, opts...)
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedCallbackerAPIClient.HealthCalls())
func (mock *CallbackerAPIClientMock) HealthCalls() []struct {
	Ctx  context.Context
	In   *emptypb.Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *emptypb.Empty
		Opts []grpc.CallOption
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// SendCallback calls SendCallbackFunc.
func (mock *CallbackerAPIClientMock) SendCallback(ctx context.Context, in *callbacker_api.SendCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	if mock.SendCallbackFunc == nil {
		panic("CallbackerAPIClientMock.SendCallbackFunc: method is nil but CallbackerAPIClient.SendCallback was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *callbacker_api.SendCallbackRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSendCallback.Lock()
	mock.calls.SendCallback = append(mock.calls.SendCallback, callInfo)
	mock.lockSendCallback.Unlock()
	return mock.SendCallbackFunc(ctx, in, opts...)
}

// SendCallbackCalls gets all the calls that were made to SendCallback.
// Check the length with:
//
//	len(mockedCallbackerAPIClient.SendCallbackCalls())
func (mock *CallbackerAPIClientMock) SendCallbackCalls() []struct {
	Ctx  context.Context
	In   *callbacker_api.SendCallbackRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *callbacker_api.SendCallbackRequest
		Opts []grpc.CallOption
	}
	mock.lockSendCallback.RLock()
	calls = mock.calls.SendCallback
	mock.lockSendCallback.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bitcoin-sv/arc/internal/callbacker"
	"sync"
)

// Ensure, that DispatcherMock does implement callbacker.Dispatcher.
// If this is not the case, regenerate this file with moq.
var _ callbacker.Dispatcher = &DispatcherMock{}

// DispatcherMock is a mock implementation of callbacker.Dispatcher.
//
//	func TestSomethingThatUsesDispatcher(t *testing.T) {
//
//		// make and configure a mocked callbacker.Dispatcher
//		mockedDispatcher := &DispatcherMock{
//			DispatchFunc: func(url string, dto *callbacker.CallbackEntry)  {
//				panic("mock out the Dispatch method")
//			},
//		}
//
//		// use mockedDispatcher in code that requires callbacker.Dispatcher
//		// and then make assertions.
//
//	}
type DispatcherMock struct {
	// DispatchFunc mocks the Dispatch method.
	DispatchFunc func(url string, dto *callbacker.CallbackEntry)

	// calls tracks calls to the methods.
	calls struct {
		// Dispatch holds details about calls to the Dispatch method.
		Dispatch []struct {
			// URL is the url argument value.
			URL string
			// Dto is the dto argument value.
			Dto *callbacker.CallbackEntry
		}
	}
	lockDispatch sync.RWMutex
}

// Dispatch calls DispatchFunc.
func (mock *DispatcherMock) Dispatch(url string, dto *callbacker.CallbackEntry) {
	if mock.DispatchFunc == nil {
		panic("DispatcherMock.DispatchFunc: method is nil but Dispatcher.Dispatch was just called")
	}
	callInfo := struct {
		URL string
		Dto *callbacker.CallbackEntry
	}{
		URL: url,
		Dto: dto,
	}
	mock.lockDispatch.Lock()
	mock.calls.Dispatch = append(mock.calls.Dispatch, callInfo)
	mock.lockDispatch.Unlock()
	mock.DispatchFunc(url, dto)
}

// DispatchCalls gets all the calls that were made to Dispatch.
// Check the length with:
//
//	len(mockedDispatcher.DispatchCalls())
func (mock *DispatcherMock) DispatchCalls() []struct {
	URL string
	Dto *callbacker.CallbackEntry
} {
	var calls []struct {
		URL string
		Dto *callbacker.CallbackEntry
	}
	mock.lockDispatch.RLock()
	calls = mock.calls.Dispatch
	mock.lockDispatch.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/callbacker/store"
	"sync"
	"time"
)

// Ensure, that ProcessorStoreMock does implement store.ProcessorStore.
// If this is not the case, regenerate this file with moq.
var _ store.ProcessorStore = &ProcessorStoreMock{}

// ProcessorStoreMock is a mock implementation of store.ProcessorStore.
//
//	func TestSomethingThatUsesProcessorStore(t *testing.T) {
//
//		// make and configure a mocked store.ProcessorStore
//		mockedProcessorStore := &ProcessorStoreMock{
//			DeleteOlderThanFunc: func(ctx context.Context, t time.Time) error {
//				panic("mock out the DeleteOlderThan method")
//			},
//			GetManyFunc: func(ctx context.Context, limit int, expiration time.Duration, batch bool) ([]*store.CallbackData, error) {
//				panic("mock out the GetMany method")
//			},
//			SetManyFunc: func(ctx context.Context, data []*store.CallbackData) (int64, error) {
//				panic("mock out the SetMany method")
//			},
//			SetNotPendingFunc: func(ctx context.Context, ids []int64) error {
//				panic("mock out the SetNotPending method")
//			},
//			SetSentFunc: func(ctx context.Context, ids []int64) error {
//				panic("mock out the SetSent method")
//			},
//		}
//
//		// use mockedProcessorStore in code that requires store.ProcessorStore
//		// and then make assertions.
//
//	}
type ProcessorStoreMock struct {
	// DeleteOlderThanFunc mocks the DeleteOlderThan method.
	DeleteOlderThanFunc func(ctx context.Context, t time.Time) error

	// GetManyFunc mocks the GetMany method.
	GetManyFunc func(ctx context.Context, limit int, expiration time.Duration, batch bool) ([]*store.CallbackData, error)

	// SetManyFunc mocks the SetMany method.
	SetManyFunc func(ctx context.Context, data []*store.CallbackData) (int64, error)

	// SetNotPendingFunc mocks the SetNotPending method.
	SetNotPendingFunc func(ctx context.Context, ids []int64) error

	// SetSentFunc mocks the SetSent method.
	SetSentFunc func(ctx context.Context, ids []int64) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteOlderThan holds details about calls to the DeleteOlderThan method.
		DeleteOlderThan []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T time.Time
		}
		// GetMany holds details about calls to the GetMany method.
		GetMany []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// Expiration is the expiration argument value.
			Expiration time.Duration
			// Batch is the batch argument value.
			Batch bool
		}
		// SetMany holds details about calls to the SetMany method.
		SetMany []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data []*store.CallbackData
		}
		// SetNotPending holds details about calls to the SetNotPending method.
		SetNotPending []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []int64
		}
		// SetSent holds details about calls to the SetSent method.
		SetSent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []int64
		}
	}
	lockDeleteOlderThan sync.RWMutex
	lockGetMany         sync.RWMutex
	lockSetMany         sync.RWMutex
	lockSetNotPending   sync.RWMutex
	lockSetSent         sync.RWMutex
}

// DeleteOlderThan calls DeleteOlderThanFunc.
func (mock *ProcessorStoreMock) DeleteOlderThan(ctx context.Context, t time.Time) error {
	if mock.DeleteOlderThanFunc == nil {
		panic("ProcessorStoreMock.DeleteOlderThanFunc: method is nil but ProcessorStore.DeleteOlderThan was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   time.Time
	}{
		Ctx: ctx,
		T:   t,
	}
	mock.lockDeleteOlderThan.Lock()
	mock.calls.DeleteOlderThan = append(mock.calls.DeleteOlderThan, callInfo)
	mock.lockDeleteOlderThan.Unlock()
	return mock.DeleteOlderThanFunc(ctx, t)
}

// DeleteOlderThanCalls gets all the calls that were made to DeleteOlderThan.
// Check the length with:
//
//	len(mockedProcessorStore.DeleteOlderThanCalls())
func (mock *ProcessorStoreMock) DeleteOlderThanCalls() []struct {
	Ctx context.Context
	T   time.Time
} {
	var calls []struct {
		Ctx context.Context
		T   time.Time
	}
	mock.lockDeleteOlderThan.RLock()
	calls = mock.calls.DeleteOlderThan
	mock.lockDeleteOlderThan.RUnlock()
	return calls
}

// GetMany calls GetManyFunc.
func (mock *ProcessorStoreMock) GetMany(ctx context.Context, limit int, expiration time.Duration, batch bool) ([]*store.CallbackData, error) {
	if mock.GetManyFunc == nil {
		panic("ProcessorStoreMock.GetManyFunc: method is nil but ProcessorStore.GetMany was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Limit      int
		Expiration time.Duration
		Batch      bool
	}{
		Ctx:        ctx,
		Limit:      limit,
		Expiration: expiration,
		Batch:      batch,
	}
	mock.lockGetMany.Lock()
	mock.calls.GetMany = append(mock.calls.GetMany, callInfo)
	mock.lockGetMany.Unlock()
	return mock.GetManyFunc(ctx, limit, expiration, batch)
}

// GetManyCalls gets all the calls that were made to GetMany.
// Check the length with:
//
//	len(mockedProcessorStore.GetManyCalls())
func (mock *ProcessorStoreMock) GetManyCalls() []struct {
	Ctx        context.Context
	Limit      int
	Expiration time.Duration
	Batch      bool
} {
	var calls []struct {
		Ctx        context.Context
		Limit      int
		Expiration time.Duration
		Batch      bool
	}
	mock.lockGetMany.RLock()
	calls = mock.calls.GetMany
	mock.lockGetMany.RUnlock()
	return calls
}

// SetMany calls SetManyFunc.
func (mock *ProcessorStoreMock) SetMany(ctx context.Context, data []*store.CallbackData) (int64, error) {
	if mock.SetManyFunc == nil {
		panic("ProcessorStoreMock.SetManyFunc: method is nil but ProcessorStore.SetMany was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data []*store.CallbackData
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockSetMany.Lock()
	mock.calls.SetMany = append(mock.calls.SetMany, callInfo)
	mock.lockSetMany.Unlock()
	return mock.SetManyFunc(ctx, data)
}

// SetManyCalls gets all the calls that were made to SetMany.
// Check the length with:
//
//	len(mockedProcessorStore.SetManyCalls())
func (mock *ProcessorStoreMock) SetManyCalls() []struct {
	Ctx  context.Context
	Data []*store.CallbackData
} {
	var calls []struct {
		Ctx  context.Context
		Data []*store.CallbackData
	}
	mock.lockSetMany.RLock()
	calls = mock.calls.SetMany
	mock.lockSetMany.RUnlock()
	return calls
}

// SetNotPending calls SetNotPendingFunc.
func (mock *ProcessorStoreMock) SetNotPending(ctx context.Context, ids []int64) error {
	if mock.SetNotPendingFunc == nil {
		panic("ProcessorStoreMock.SetNotPendingFunc: method is nil but ProcessorStore.SetNotPending was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []int64
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockSetNotPending.Lock()
	mock.calls.SetNotPending = append(mock.calls.SetNotPending, callInfo)
	mock.lockSetNotPending.Unlock()
	return mock.SetNotPendingFunc(ctx, ids)
}

// SetNotPendingCalls gets all the calls that were made to SetNotPending.
// Check the length with:
//
//	len(mockedProcessorStore.SetNotPendingCalls())
func (mock *ProcessorStoreMock) SetNotPendingCalls() []struct {
	Ctx context.Context
	Ids []int64
} {
	var calls []struct {
		Ctx context.Context
		Ids []int64
	}
	mock.lockSetNotPending.RLock()
	calls = mock.calls.SetNotPending
	mock.lockSetNotPending.RUnlock()
	return calls
}

// SetSent calls SetSentFunc.
func (mock *ProcessorStoreMock) SetSent(ctx context.Context, ids []int64) error {
	if mock.SetSentFunc == nil {
		panic("ProcessorStoreMock.SetSentFunc: method is nil but ProcessorStore.SetSent was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []int64
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockSetSent.Lock()
	mock.calls.SetSent = append(mock.calls.SetSent, callInfo)
	mock.lockSetSent.Unlock()
	return mock.SetSentFunc(ctx, ids)
}

// SetSentCalls gets all the calls that were made to SetSent.
// Check the length with:
//
//	len(mockedProcessorStore.SetSentCalls())
func (mock *ProcessorStoreMock) SetSentCalls() []struct {
	Ctx context.Context
	Ids []int64
} {
	var calls []struct {
		Ctx context.Context
		Ids []int64
	}
	mock.lockSetSent.RLock()
	calls = mock.calls.SetSent
	mock.lockSetSent.RUnlock()
	return calls
}

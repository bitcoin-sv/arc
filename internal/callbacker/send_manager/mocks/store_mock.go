// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/callbacker/send_manager"
	"github.com/bitcoin-sv/arc/internal/callbacker/store"
	"sync"
	"time"
)

// Ensure, that SendManagerStoreMock does implement send_manager.SendManagerStore.
// If this is not the case, regenerate this file with moq.
var _ send_manager.SendManagerStore = &SendManagerStoreMock{}

// SendManagerStoreMock is a mock implementation of send_manager.SendManagerStore.
//
//	func TestSomethingThatUsesSendManagerStore(t *testing.T) {
//
//		// make and configure a mocked send_manager.SendManagerStore
//		mockedSendManagerStore := &SendManagerStoreMock{
//			GetAndMarkSentFunc: func(ctx context.Context, url string, limit int, expiration time.Duration, batch bool) ([]*store.CallbackData, func() error, func() error, error) {
//				panic("mock out the GetAndMarkSent method")
//			},
//			SetManyFunc: func(ctx context.Context, data []*store.CallbackData) error {
//				panic("mock out the SetMany method")
//			},
//		}
//
//		// use mockedSendManagerStore in code that requires send_manager.SendManagerStore
//		// and then make assertions.
//
//	}
type SendManagerStoreMock struct {
	// GetAndMarkSentFunc mocks the GetAndMarkSent method.
	GetAndMarkSentFunc func(ctx context.Context, url string, limit int, expiration time.Duration, batch bool) ([]*store.CallbackData, func() error, func() error, error)

	// SetManyFunc mocks the SetMany method.
	SetManyFunc func(ctx context.Context, data []*store.CallbackData) error

	// calls tracks calls to the methods.
	calls struct {
		// GetAndMarkSent holds details about calls to the GetAndMarkSent method.
		GetAndMarkSent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
			// Limit is the limit argument value.
			Limit int
			// Expiration is the expiration argument value.
			Expiration time.Duration
			// Batch is the batch argument value.
			Batch bool
		}
		// SetMany holds details about calls to the SetMany method.
		SetMany []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data []*store.CallbackData
		}
	}
	lockGetAndMarkSent sync.RWMutex
	lockSetMany        sync.RWMutex
}

// GetAndMarkSent calls GetAndMarkSentFunc.
func (mock *SendManagerStoreMock) GetAndMarkSent(ctx context.Context, url string, limit int, expiration time.Duration, batch bool) ([]*store.CallbackData, func() error, func() error, error) {
	if mock.GetAndMarkSentFunc == nil {
		panic("SendManagerStoreMock.GetAndMarkSentFunc: method is nil but SendManagerStore.GetAndMarkSent was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		URL        string
		Limit      int
		Expiration time.Duration
		Batch      bool
	}{
		Ctx:        ctx,
		URL:        url,
		Limit:      limit,
		Expiration: expiration,
		Batch:      batch,
	}
	mock.lockGetAndMarkSent.Lock()
	mock.calls.GetAndMarkSent = append(mock.calls.GetAndMarkSent, callInfo)
	mock.lockGetAndMarkSent.Unlock()
	return mock.GetAndMarkSentFunc(ctx, url, limit, expiration, batch)
}

// GetAndMarkSentCalls gets all the calls that were made to GetAndMarkSent.
// Check the length with:
//
//	len(mockedSendManagerStore.GetAndMarkSentCalls())
func (mock *SendManagerStoreMock) GetAndMarkSentCalls() []struct {
	Ctx        context.Context
	URL        string
	Limit      int
	Expiration time.Duration
	Batch      bool
} {
	var calls []struct {
		Ctx        context.Context
		URL        string
		Limit      int
		Expiration time.Duration
		Batch      bool
	}
	mock.lockGetAndMarkSent.RLock()
	calls = mock.calls.GetAndMarkSent
	mock.lockGetAndMarkSent.RUnlock()
	return calls
}

// SetMany calls SetManyFunc.
func (mock *SendManagerStoreMock) SetMany(ctx context.Context, data []*store.CallbackData) error {
	if mock.SetManyFunc == nil {
		panic("SendManagerStoreMock.SetManyFunc: method is nil but SendManagerStore.SetMany was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data []*store.CallbackData
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockSetMany.Lock()
	mock.calls.SetMany = append(mock.calls.SetMany, callInfo)
	mock.lockSetMany.Unlock()
	return mock.SetManyFunc(ctx, data)
}

// SetManyCalls gets all the calls that were made to SetMany.
// Check the length with:
//
//	len(mockedSendManagerStore.SetManyCalls())
func (mock *SendManagerStoreMock) SetManyCalls() []struct {
	Ctx  context.Context
	Data []*store.CallbackData
} {
	var calls []struct {
		Ctx  context.Context
		Data []*store.CallbackData
	}
	mock.lockSetMany.RLock()
	calls = mock.calls.SetMany
	mock.lockSetMany.RUnlock()
	return calls
}

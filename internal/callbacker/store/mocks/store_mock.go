// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/callbacker/store"
	"sync"
)

// Ensure, that CallbackStoreMock does implement store.CallbackStore.
// If this is not the case, regenerate this file with moq.
var _ store.CallbackStore = &CallbackStoreMock{}

// CallbackStoreMock is a mock implementation of store.CallbackStore.
//
//	func TestSomethingThatUsesCallbackStore(t *testing.T) {
//
//		// make and configure a mocked store.CallbackStore
//		mockedCallbackStore := &CallbackStoreMock{
//			DeleteURLMappingsExceptFunc: func(ctx context.Context, except []string) (int64, error) {
//				panic("mock out the DeleteURLMappingsExcept method")
//			},
//		}
//
//		// use mockedCallbackStore in code that requires store.CallbackStore
//		// and then make assertions.
//
//	}
type CallbackStoreMock struct {
	// DeleteURLMappingsExceptFunc mocks the DeleteURLMappingsExcept method.
	DeleteURLMappingsExceptFunc func(ctx context.Context, except []string) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteURLMappingsExcept holds details about calls to the DeleteURLMappingsExcept method.
		DeleteURLMappingsExcept []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Except is the except argument value.
			Except []string
		}
	}
	lockDeleteURLMappingsExcept sync.RWMutex
}

// DeleteURLMappingsExcept calls DeleteURLMappingsExceptFunc.
func (mock *CallbackStoreMock) DeleteURLMappingsExcept(ctx context.Context, except []string) (int64, error) {
	if mock.DeleteURLMappingsExceptFunc == nil {
		panic("CallbackStoreMock.DeleteURLMappingsExceptFunc: method is nil but CallbackStore.DeleteURLMappingsExcept was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Except []string
	}{
		Ctx:    ctx,
		Except: except,
	}
	mock.lockDeleteURLMappingsExcept.Lock()
	mock.calls.DeleteURLMappingsExcept = append(mock.calls.DeleteURLMappingsExcept, callInfo)
	mock.lockDeleteURLMappingsExcept.Unlock()
	return mock.DeleteURLMappingsExceptFunc(ctx, except)
}

// DeleteURLMappingsExceptCalls gets all the calls that were made to DeleteURLMappingsExcept.
// Check the length with:
//
//	len(mockedCallbackStore.DeleteURLMappingsExceptCalls())
func (mock *CallbackStoreMock) DeleteURLMappingsExceptCalls() []struct {
	Ctx    context.Context
	Except []string
} {
	var calls []struct {
		Ctx    context.Context
		Except []string
	}
	mock.lockDeleteURLMappingsExcept.RLock()
	calls = mock.calls.DeleteURLMappingsExcept
	mock.lockDeleteURLMappingsExcept.RUnlock()
	return calls
}

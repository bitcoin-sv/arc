// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/blocktx/blocktx_api"
	"github.com/bitcoin-sv/arc/internal/global"
	"sync"
)

// Ensure, that BlocktxClientMock does implement global.BlocktxClient.
// If this is not the case, regenerate this file with moq.
var _ global.BlocktxClient = &BlocktxClientMock{}

// BlocktxClientMock is a mock implementation of global.BlocktxClient.
//
//	func TestSomethingThatUsesBlocktxClient(t *testing.T) {
//
//		// make and configure a mocked global.BlocktxClient
//		mockedBlocktxClient := &BlocktxClientMock{
//			AnyTransactionsMinedFunc: func(ctx context.Context, hash [][]byte) ([]*blocktx_api.IsMined, error) {
//				panic("mock out the AnyTransactionsMined method")
//			},
//			CurrentBlockHeightFunc: func(ctx context.Context) (*blocktx_api.CurrentBlockHeightResponse, error) {
//				panic("mock out the CurrentBlockHeight method")
//			},
//			LatestBlocksFunc: func(ctx context.Context, blocks uint64) (*blocktx_api.LatestBlocksResponse, error) {
//				panic("mock out the LatestBlocks method")
//			},
//			RegisterTransactionFunc: func(ctx context.Context, hash []byte) error {
//				panic("mock out the RegisterTransaction method")
//			},
//			RegisterTransactionsFunc: func(ctx context.Context, hashes [][]byte) error {
//				panic("mock out the RegisterTransactions method")
//			},
//		}
//
//		// use mockedBlocktxClient in code that requires global.BlocktxClient
//		// and then make assertions.
//
//	}
type BlocktxClientMock struct {
	// AnyTransactionsMinedFunc mocks the AnyTransactionsMined method.
	AnyTransactionsMinedFunc func(ctx context.Context, hash [][]byte) ([]*blocktx_api.IsMined, error)

	// CurrentBlockHeightFunc mocks the CurrentBlockHeight method.
	CurrentBlockHeightFunc func(ctx context.Context) (*blocktx_api.CurrentBlockHeightResponse, error)

	// LatestBlocksFunc mocks the LatestBlocks method.
	LatestBlocksFunc func(ctx context.Context, blocks uint64) (*blocktx_api.LatestBlocksResponse, error)

	// RegisterTransactionFunc mocks the RegisterTransaction method.
	RegisterTransactionFunc func(ctx context.Context, hash []byte) error

	// RegisterTransactionsFunc mocks the RegisterTransactions method.
	RegisterTransactionsFunc func(ctx context.Context, hashes [][]byte) error

	// calls tracks calls to the methods.
	calls struct {
		// AnyTransactionsMined holds details about calls to the AnyTransactionsMined method.
		AnyTransactionsMined []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Hash is the hash argument value.
			Hash [][]byte
		}
		// CurrentBlockHeight holds details about calls to the CurrentBlockHeight method.
		CurrentBlockHeight []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// LatestBlocks holds details about calls to the LatestBlocks method.
		LatestBlocks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Blocks is the blocks argument value.
			Blocks uint64
		}
		// RegisterTransaction holds details about calls to the RegisterTransaction method.
		RegisterTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Hash is the hash argument value.
			Hash []byte
		}
		// RegisterTransactions holds details about calls to the RegisterTransactions method.
		RegisterTransactions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Hashes is the hashes argument value.
			Hashes [][]byte
		}
	}
	lockAnyTransactionsMined sync.RWMutex
	lockCurrentBlockHeight   sync.RWMutex
	lockLatestBlocks         sync.RWMutex
	lockRegisterTransaction  sync.RWMutex
	lockRegisterTransactions sync.RWMutex
}

// AnyTransactionsMined calls AnyTransactionsMinedFunc.
func (mock *BlocktxClientMock) AnyTransactionsMined(ctx context.Context, hash [][]byte) ([]*blocktx_api.IsMined, error) {
	if mock.AnyTransactionsMinedFunc == nil {
		panic("BlocktxClientMock.AnyTransactionsMinedFunc: method is nil but BlocktxClient.AnyTransactionsMined was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Hash [][]byte
	}{
		Ctx:  ctx,
		Hash: hash,
	}
	mock.lockAnyTransactionsMined.Lock()
	mock.calls.AnyTransactionsMined = append(mock.calls.AnyTransactionsMined, callInfo)
	mock.lockAnyTransactionsMined.Unlock()
	return mock.AnyTransactionsMinedFunc(ctx, hash)
}

// AnyTransactionsMinedCalls gets all the calls that were made to AnyTransactionsMined.
// Check the length with:
//
//	len(mockedBlocktxClient.AnyTransactionsMinedCalls())
func (mock *BlocktxClientMock) AnyTransactionsMinedCalls() []struct {
	Ctx  context.Context
	Hash [][]byte
} {
	var calls []struct {
		Ctx  context.Context
		Hash [][]byte
	}
	mock.lockAnyTransactionsMined.RLock()
	calls = mock.calls.AnyTransactionsMined
	mock.lockAnyTransactionsMined.RUnlock()
	return calls
}

// CurrentBlockHeight calls CurrentBlockHeightFunc.
func (mock *BlocktxClientMock) CurrentBlockHeight(ctx context.Context) (*blocktx_api.CurrentBlockHeightResponse, error) {
	if mock.CurrentBlockHeightFunc == nil {
		panic("BlocktxClientMock.CurrentBlockHeightFunc: method is nil but BlocktxClient.CurrentBlockHeight was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCurrentBlockHeight.Lock()
	mock.calls.CurrentBlockHeight = append(mock.calls.CurrentBlockHeight, callInfo)
	mock.lockCurrentBlockHeight.Unlock()
	return mock.CurrentBlockHeightFunc(ctx)
}

// CurrentBlockHeightCalls gets all the calls that were made to CurrentBlockHeight.
// Check the length with:
//
//	len(mockedBlocktxClient.CurrentBlockHeightCalls())
func (mock *BlocktxClientMock) CurrentBlockHeightCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCurrentBlockHeight.RLock()
	calls = mock.calls.CurrentBlockHeight
	mock.lockCurrentBlockHeight.RUnlock()
	return calls
}

// LatestBlocks calls LatestBlocksFunc.
func (mock *BlocktxClientMock) LatestBlocks(ctx context.Context, blocks uint64) (*blocktx_api.LatestBlocksResponse, error) {
	if mock.LatestBlocksFunc == nil {
		panic("BlocktxClientMock.LatestBlocksFunc: method is nil but BlocktxClient.LatestBlocks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Blocks uint64
	}{
		Ctx:    ctx,
		Blocks: blocks,
	}
	mock.lockLatestBlocks.Lock()
	mock.calls.LatestBlocks = append(mock.calls.LatestBlocks, callInfo)
	mock.lockLatestBlocks.Unlock()
	return mock.LatestBlocksFunc(ctx, blocks)
}

// LatestBlocksCalls gets all the calls that were made to LatestBlocks.
// Check the length with:
//
//	len(mockedBlocktxClient.LatestBlocksCalls())
func (mock *BlocktxClientMock) LatestBlocksCalls() []struct {
	Ctx    context.Context
	Blocks uint64
} {
	var calls []struct {
		Ctx    context.Context
		Blocks uint64
	}
	mock.lockLatestBlocks.RLock()
	calls = mock.calls.LatestBlocks
	mock.lockLatestBlocks.RUnlock()
	return calls
}

// RegisterTransaction calls RegisterTransactionFunc.
func (mock *BlocktxClientMock) RegisterTransaction(ctx context.Context, hash []byte) error {
	if mock.RegisterTransactionFunc == nil {
		panic("BlocktxClientMock.RegisterTransactionFunc: method is nil but BlocktxClient.RegisterTransaction was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Hash []byte
	}{
		Ctx:  ctx,
		Hash: hash,
	}
	mock.lockRegisterTransaction.Lock()
	mock.calls.RegisterTransaction = append(mock.calls.RegisterTransaction, callInfo)
	mock.lockRegisterTransaction.Unlock()
	return mock.RegisterTransactionFunc(ctx, hash)
}

// RegisterTransactionCalls gets all the calls that were made to RegisterTransaction.
// Check the length with:
//
//	len(mockedBlocktxClient.RegisterTransactionCalls())
func (mock *BlocktxClientMock) RegisterTransactionCalls() []struct {
	Ctx  context.Context
	Hash []byte
} {
	var calls []struct {
		Ctx  context.Context
		Hash []byte
	}
	mock.lockRegisterTransaction.RLock()
	calls = mock.calls.RegisterTransaction
	mock.lockRegisterTransaction.RUnlock()
	return calls
}

// RegisterTransactions calls RegisterTransactionsFunc.
func (mock *BlocktxClientMock) RegisterTransactions(ctx context.Context, hashes [][]byte) error {
	if mock.RegisterTransactionsFunc == nil {
		panic("BlocktxClientMock.RegisterTransactionsFunc: method is nil but BlocktxClient.RegisterTransactions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Hashes [][]byte
	}{
		Ctx:    ctx,
		Hashes: hashes,
	}
	mock.lockRegisterTransactions.Lock()
	mock.calls.RegisterTransactions = append(mock.calls.RegisterTransactions, callInfo)
	mock.lockRegisterTransactions.Unlock()
	return mock.RegisterTransactionsFunc(ctx, hashes)
}

// RegisterTransactionsCalls gets all the calls that were made to RegisterTransactions.
// Check the length with:
//
//	len(mockedBlocktxClient.RegisterTransactionsCalls())
func (mock *BlocktxClientMock) RegisterTransactionsCalls() []struct {
	Ctx    context.Context
	Hashes [][]byte
} {
	var calls []struct {
		Ctx    context.Context
		Hashes [][]byte
	}
	mock.lockRegisterTransactions.RLock()
	calls = mock.calls.RegisterTransactions
	mock.lockRegisterTransactions.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/global"
	"github.com/bitcoin-sv/arc/internal/metamorph"
	"github.com/bitcoin-sv/arc/internal/p2p"
	"sync"
)

// Ensure, that MediatorMock does implement metamorph.Mediator.
// If this is not the case, regenerate this file with moq.
var _ metamorph.Mediator = &MediatorMock{}

// MediatorMock is a mock implementation of metamorph.Mediator.
//
//	func TestSomethingThatUsesMediator(t *testing.T) {
//
//		// make and configure a mocked metamorph.Mediator
//		mockedMediator := &MediatorMock{
//			AnnounceTxAsyncFunc: func(ctx context.Context, tx *global.TransactionData)  {
//				panic("mock out the AnnounceTxAsync method")
//			},
//			AskForTxAsyncFunc: func(ctx context.Context, tx *global.TransactionData)  {
//				panic("mock out the AskForTxAsync method")
//			},
//			CountConnectedPeersFunc: func() uint {
//				panic("mock out the CountConnectedPeers method")
//			},
//			GetPeersFunc: func() []p2p.PeerI {
//				panic("mock out the GetPeers method")
//			},
//		}
//
//		// use mockedMediator in code that requires metamorph.Mediator
//		// and then make assertions.
//
//	}
type MediatorMock struct {
	// AnnounceTxAsyncFunc mocks the AnnounceTxAsync method.
	AnnounceTxAsyncFunc func(ctx context.Context, tx *global.TransactionData)

	// AskForTxAsyncFunc mocks the AskForTxAsync method.
	AskForTxAsyncFunc func(ctx context.Context, tx *global.TransactionData)

	// CountConnectedPeersFunc mocks the CountConnectedPeers method.
	CountConnectedPeersFunc func() uint

	// GetPeersFunc mocks the GetPeers method.
	GetPeersFunc func() []p2p.PeerI

	// calls tracks calls to the methods.
	calls struct {
		// AnnounceTxAsync holds details about calls to the AnnounceTxAsync method.
		AnnounceTxAsync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx *global.TransactionData
		}
		// AskForTxAsync holds details about calls to the AskForTxAsync method.
		AskForTxAsync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx *global.TransactionData
		}
		// CountConnectedPeers holds details about calls to the CountConnectedPeers method.
		CountConnectedPeers []struct {
		}
		// GetPeers holds details about calls to the GetPeers method.
		GetPeers []struct {
		}
	}
	lockAnnounceTxAsync     sync.RWMutex
	lockAskForTxAsync       sync.RWMutex
	lockCountConnectedPeers sync.RWMutex
	lockGetPeers            sync.RWMutex
}

// AnnounceTxAsync calls AnnounceTxAsyncFunc.
func (mock *MediatorMock) AnnounceTxAsync(ctx context.Context, tx *global.TransactionData) {
	if mock.AnnounceTxAsyncFunc == nil {
		panic("MediatorMock.AnnounceTxAsyncFunc: method is nil but Mediator.AnnounceTxAsync was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Tx  *global.TransactionData
	}{
		Ctx: ctx,
		Tx:  tx,
	}
	mock.lockAnnounceTxAsync.Lock()
	mock.calls.AnnounceTxAsync = append(mock.calls.AnnounceTxAsync, callInfo)
	mock.lockAnnounceTxAsync.Unlock()
	mock.AnnounceTxAsyncFunc(ctx, tx)
}

// AnnounceTxAsyncCalls gets all the calls that were made to AnnounceTxAsync.
// Check the length with:
//
//	len(mockedMediator.AnnounceTxAsyncCalls())
func (mock *MediatorMock) AnnounceTxAsyncCalls() []struct {
	Ctx context.Context
	Tx  *global.TransactionData
} {
	var calls []struct {
		Ctx context.Context
		Tx  *global.TransactionData
	}
	mock.lockAnnounceTxAsync.RLock()
	calls = mock.calls.AnnounceTxAsync
	mock.lockAnnounceTxAsync.RUnlock()
	return calls
}

// AskForTxAsync calls AskForTxAsyncFunc.
func (mock *MediatorMock) AskForTxAsync(ctx context.Context, tx *global.TransactionData) {
	if mock.AskForTxAsyncFunc == nil {
		panic("MediatorMock.AskForTxAsyncFunc: method is nil but Mediator.AskForTxAsync was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Tx  *global.TransactionData
	}{
		Ctx: ctx,
		Tx:  tx,
	}
	mock.lockAskForTxAsync.Lock()
	mock.calls.AskForTxAsync = append(mock.calls.AskForTxAsync, callInfo)
	mock.lockAskForTxAsync.Unlock()
	mock.AskForTxAsyncFunc(ctx, tx)
}

// AskForTxAsyncCalls gets all the calls that were made to AskForTxAsync.
// Check the length with:
//
//	len(mockedMediator.AskForTxAsyncCalls())
func (mock *MediatorMock) AskForTxAsyncCalls() []struct {
	Ctx context.Context
	Tx  *global.TransactionData
} {
	var calls []struct {
		Ctx context.Context
		Tx  *global.TransactionData
	}
	mock.lockAskForTxAsync.RLock()
	calls = mock.calls.AskForTxAsync
	mock.lockAskForTxAsync.RUnlock()
	return calls
}

// CountConnectedPeers calls CountConnectedPeersFunc.
func (mock *MediatorMock) CountConnectedPeers() uint {
	if mock.CountConnectedPeersFunc == nil {
		panic("MediatorMock.CountConnectedPeersFunc: method is nil but Mediator.CountConnectedPeers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCountConnectedPeers.Lock()
	mock.calls.CountConnectedPeers = append(mock.calls.CountConnectedPeers, callInfo)
	mock.lockCountConnectedPeers.Unlock()
	return mock.CountConnectedPeersFunc()
}

// CountConnectedPeersCalls gets all the calls that were made to CountConnectedPeers.
// Check the length with:
//
//	len(mockedMediator.CountConnectedPeersCalls())
func (mock *MediatorMock) CountConnectedPeersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCountConnectedPeers.RLock()
	calls = mock.calls.CountConnectedPeers
	mock.lockCountConnectedPeers.RUnlock()
	return calls
}

// GetPeers calls GetPeersFunc.
func (mock *MediatorMock) GetPeers() []p2p.PeerI {
	if mock.GetPeersFunc == nil {
		panic("MediatorMock.GetPeersFunc: method is nil but Mediator.GetPeers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetPeers.Lock()
	mock.calls.GetPeers = append(mock.calls.GetPeers, callInfo)
	mock.lockGetPeers.Unlock()
	return mock.GetPeersFunc()
}

// GetPeersCalls gets all the calls that were made to GetPeers.
// Check the length with:
//
//	len(mockedMediator.GetPeersCalls())
func (mock *MediatorMock) GetPeersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetPeers.RLock()
	calls = mock.calls.GetPeers
	mock.lockGetPeers.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/mq"
	"github.com/nats-io/nats.go"
	"github.com/nats-io/nats.go/jetstream"
	"google.golang.org/protobuf/reflect/protoreflect"
	"sync"
)

// Ensure, that MessageQueueClientMock does implement mq.MessageQueueClient.
// If this is not the case, regenerate this file with moq.
var _ mq.MessageQueueClient = &MessageQueueClientMock{}

// MessageQueueClientMock is a mock implementation of mq.MessageQueueClient.
//
//	func TestSomethingThatUsesMessageQueueClient(t *testing.T) {
//
//		// make and configure a mocked mq.MessageQueueClient
//		mockedMessageQueueClient := &MessageQueueClientMock{
//			ConsumeFunc: func(topic string, msgFunc func([]byte) error) error {
//				panic("mock out the Consume method")
//			},
//			ConsumeMsgFunc: func(topic string, msgFunc func(msg jetstream.Msg) error) error {
//				panic("mock out the ConsumeMsg method")
//			},
//			PublishFunc: func(ctx context.Context, topic string, data []byte) error {
//				panic("mock out the Publish method")
//			},
//			PublishAsyncFunc: func(topic string, hash []byte) error {
//				panic("mock out the PublishAsync method")
//			},
//			PublishCoreFunc: func(topic string, data []byte) error {
//				panic("mock out the PublishCore method")
//			},
//			PublishMarshalFunc: func(ctx context.Context, topic string, m protoreflect.ProtoMessage) error {
//				panic("mock out the PublishMarshal method")
//			},
//			PublishMarshalAsyncFunc: func(topic string, m protoreflect.ProtoMessage) error {
//				panic("mock out the PublishMarshalAsync method")
//			},
//			PublishMarshalCoreFunc: func(topic string, m protoreflect.ProtoMessage) error {
//				panic("mock out the PublishMarshalCore method")
//			},
//			QueueSubscribeFunc: func(topic string, msgFunc func([]byte) error) error {
//				panic("mock out the QueueSubscribe method")
//			},
//			ShutdownFunc: func()  {
//				panic("mock out the Shutdown method")
//			},
//			StatusFunc: func() nats.Status {
//				panic("mock out the Status method")
//			},
//		}
//
//		// use mockedMessageQueueClient in code that requires mq.MessageQueueClient
//		// and then make assertions.
//
//	}
type MessageQueueClientMock struct {
	// ConsumeFunc mocks the Consume method.
	ConsumeFunc func(topic string, msgFunc func([]byte) error) error

	// ConsumeMsgFunc mocks the ConsumeMsg method.
	ConsumeMsgFunc func(topic string, msgFunc func(msg jetstream.Msg) error) error

	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, topic string, data []byte) error

	// PublishAsyncFunc mocks the PublishAsync method.
	PublishAsyncFunc func(topic string, hash []byte) error

	// PublishCoreFunc mocks the PublishCore method.
	PublishCoreFunc func(topic string, data []byte) error

	// PublishMarshalFunc mocks the PublishMarshal method.
	PublishMarshalFunc func(ctx context.Context, topic string, m protoreflect.ProtoMessage) error

	// PublishMarshalAsyncFunc mocks the PublishMarshalAsync method.
	PublishMarshalAsyncFunc func(topic string, m protoreflect.ProtoMessage) error

	// PublishMarshalCoreFunc mocks the PublishMarshalCore method.
	PublishMarshalCoreFunc func(topic string, m protoreflect.ProtoMessage) error

	// QueueSubscribeFunc mocks the QueueSubscribe method.
	QueueSubscribeFunc func(topic string, msgFunc func([]byte) error) error

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func()

	// StatusFunc mocks the Status method.
	StatusFunc func() nats.Status

	// calls tracks calls to the methods.
	calls struct {
		// Consume holds details about calls to the Consume method.
		Consume []struct {
			// Topic is the topic argument value.
			Topic string
			// MsgFunc is the msgFunc argument value.
			MsgFunc func([]byte) error
		}
		// ConsumeMsg holds details about calls to the ConsumeMsg method.
		ConsumeMsg []struct {
			// Topic is the topic argument value.
			Topic string
			// MsgFunc is the msgFunc argument value.
			MsgFunc func(msg jetstream.Msg) error
		}
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Topic is the topic argument value.
			Topic string
			// Data is the data argument value.
			Data []byte
		}
		// PublishAsync holds details about calls to the PublishAsync method.
		PublishAsync []struct {
			// Topic is the topic argument value.
			Topic string
			// Hash is the hash argument value.
			Hash []byte
		}
		// PublishCore holds details about calls to the PublishCore method.
		PublishCore []struct {
			// Topic is the topic argument value.
			Topic string
			// Data is the data argument value.
			Data []byte
		}
		// PublishMarshal holds details about calls to the PublishMarshal method.
		PublishMarshal []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Topic is the topic argument value.
			Topic string
			// M is the m argument value.
			M protoreflect.ProtoMessage
		}
		// PublishMarshalAsync holds details about calls to the PublishMarshalAsync method.
		PublishMarshalAsync []struct {
			// Topic is the topic argument value.
			Topic string
			// M is the m argument value.
			M protoreflect.ProtoMessage
		}
		// PublishMarshalCore holds details about calls to the PublishMarshalCore method.
		PublishMarshalCore []struct {
			// Topic is the topic argument value.
			Topic string
			// M is the m argument value.
			M protoreflect.ProtoMessage
		}
		// QueueSubscribe holds details about calls to the QueueSubscribe method.
		QueueSubscribe []struct {
			// Topic is the topic argument value.
			Topic string
			// MsgFunc is the msgFunc argument value.
			MsgFunc func([]byte) error
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
		}
		// Status holds details about calls to the Status method.
		Status []struct {
		}
	}
	lockConsume             sync.RWMutex
	lockConsumeMsg          sync.RWMutex
	lockPublish             sync.RWMutex
	lockPublishAsync        sync.RWMutex
	lockPublishCore         sync.RWMutex
	lockPublishMarshal      sync.RWMutex
	lockPublishMarshalAsync sync.RWMutex
	lockPublishMarshalCore  sync.RWMutex
	lockQueueSubscribe      sync.RWMutex
	lockShutdown            sync.RWMutex
	lockStatus              sync.RWMutex
}

// Consume calls ConsumeFunc.
func (mock *MessageQueueClientMock) Consume(topic string, msgFunc func([]byte) error) error {
	if mock.ConsumeFunc == nil {
		panic("MessageQueueClientMock.ConsumeFunc: method is nil but MessageQueueClient.Consume was just called")
	}
	callInfo := struct {
		Topic   string
		MsgFunc func([]byte) error
	}{
		Topic:   topic,
		MsgFunc: msgFunc,
	}
	mock.lockConsume.Lock()
	mock.calls.Consume = append(mock.calls.Consume, callInfo)
	mock.lockConsume.Unlock()
	return mock.ConsumeFunc(topic, msgFunc)
}

// ConsumeCalls gets all the calls that were made to Consume.
// Check the length with:
//
//	len(mockedMessageQueueClient.ConsumeCalls())
func (mock *MessageQueueClientMock) ConsumeCalls() []struct {
	Topic   string
	MsgFunc func([]byte) error
} {
	var calls []struct {
		Topic   string
		MsgFunc func([]byte) error
	}
	mock.lockConsume.RLock()
	calls = mock.calls.Consume
	mock.lockConsume.RUnlock()
	return calls
}

// ConsumeMsg calls ConsumeMsgFunc.
func (mock *MessageQueueClientMock) ConsumeMsg(topic string, msgFunc func(msg jetstream.Msg) error) error {
	if mock.ConsumeMsgFunc == nil {
		panic("MessageQueueClientMock.ConsumeMsgFunc: method is nil but MessageQueueClient.ConsumeMsg was just called")
	}
	callInfo := struct {
		Topic   string
		MsgFunc func(msg jetstream.Msg) error
	}{
		Topic:   topic,
		MsgFunc: msgFunc,
	}
	mock.lockConsumeMsg.Lock()
	mock.calls.ConsumeMsg = append(mock.calls.ConsumeMsg, callInfo)
	mock.lockConsumeMsg.Unlock()
	return mock.ConsumeMsgFunc(topic, msgFunc)
}

// ConsumeMsgCalls gets all the calls that were made to ConsumeMsg.
// Check the length with:
//
//	len(mockedMessageQueueClient.ConsumeMsgCalls())
func (mock *MessageQueueClientMock) ConsumeMsgCalls() []struct {
	Topic   string
	MsgFunc func(msg jetstream.Msg) error
} {
	var calls []struct {
		Topic   string
		MsgFunc func(msg jetstream.Msg) error
	}
	mock.lockConsumeMsg.RLock()
	calls = mock.calls.ConsumeMsg
	mock.lockConsumeMsg.RUnlock()
	return calls
}

// Publish calls PublishFunc.
func (mock *MessageQueueClientMock) Publish(ctx context.Context, topic string, data []byte) error {
	if mock.PublishFunc == nil {
		panic("MessageQueueClientMock.PublishFunc: method is nil but MessageQueueClient.Publish was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Topic string
		Data  []byte
	}{
		Ctx:   ctx,
		Topic: topic,
		Data:  data,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(ctx, topic, data)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedMessageQueueClient.PublishCalls())
func (mock *MessageQueueClientMock) PublishCalls() []struct {
	Ctx   context.Context
	Topic string
	Data  []byte
} {
	var calls []struct {
		Ctx   context.Context
		Topic string
		Data  []byte
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}

// PublishAsync calls PublishAsyncFunc.
func (mock *MessageQueueClientMock) PublishAsync(topic string, hash []byte) error {
	if mock.PublishAsyncFunc == nil {
		panic("MessageQueueClientMock.PublishAsyncFunc: method is nil but MessageQueueClient.PublishAsync was just called")
	}
	callInfo := struct {
		Topic string
		Hash  []byte
	}{
		Topic: topic,
		Hash:  hash,
	}
	mock.lockPublishAsync.Lock()
	mock.calls.PublishAsync = append(mock.calls.PublishAsync, callInfo)
	mock.lockPublishAsync.Unlock()
	return mock.PublishAsyncFunc(topic, hash)
}

// PublishAsyncCalls gets all the calls that were made to PublishAsync.
// Check the length with:
//
//	len(mockedMessageQueueClient.PublishAsyncCalls())
func (mock *MessageQueueClientMock) PublishAsyncCalls() []struct {
	Topic string
	Hash  []byte
} {
	var calls []struct {
		Topic string
		Hash  []byte
	}
	mock.lockPublishAsync.RLock()
	calls = mock.calls.PublishAsync
	mock.lockPublishAsync.RUnlock()
	return calls
}

// PublishCore calls PublishCoreFunc.
func (mock *MessageQueueClientMock) PublishCore(topic string, data []byte) error {
	if mock.PublishCoreFunc == nil {
		panic("MessageQueueClientMock.PublishCoreFunc: method is nil but MessageQueueClient.PublishCore was just called")
	}
	callInfo := struct {
		Topic string
		Data  []byte
	}{
		Topic: topic,
		Data:  data,
	}
	mock.lockPublishCore.Lock()
	mock.calls.PublishCore = append(mock.calls.PublishCore, callInfo)
	mock.lockPublishCore.Unlock()
	return mock.PublishCoreFunc(topic, data)
}

// PublishCoreCalls gets all the calls that were made to PublishCore.
// Check the length with:
//
//	len(mockedMessageQueueClient.PublishCoreCalls())
func (mock *MessageQueueClientMock) PublishCoreCalls() []struct {
	Topic string
	Data  []byte
} {
	var calls []struct {
		Topic string
		Data  []byte
	}
	mock.lockPublishCore.RLock()
	calls = mock.calls.PublishCore
	mock.lockPublishCore.RUnlock()
	return calls
}

// PublishMarshal calls PublishMarshalFunc.
func (mock *MessageQueueClientMock) PublishMarshal(ctx context.Context, topic string, m protoreflect.ProtoMessage) error {
	if mock.PublishMarshalFunc == nil {
		panic("MessageQueueClientMock.PublishMarshalFunc: method is nil but MessageQueueClient.PublishMarshal was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Topic string
		M     protoreflect.ProtoMessage
	}{
		Ctx:   ctx,
		Topic: topic,
		M:     m,
	}
	mock.lockPublishMarshal.Lock()
	mock.calls.PublishMarshal = append(mock.calls.PublishMarshal, callInfo)
	mock.lockPublishMarshal.Unlock()
	return mock.PublishMarshalFunc(ctx, topic, m)
}

// PublishMarshalCalls gets all the calls that were made to PublishMarshal.
// Check the length with:
//
//	len(mockedMessageQueueClient.PublishMarshalCalls())
func (mock *MessageQueueClientMock) PublishMarshalCalls() []struct {
	Ctx   context.Context
	Topic string
	M     protoreflect.ProtoMessage
} {
	var calls []struct {
		Ctx   context.Context
		Topic string
		M     protoreflect.ProtoMessage
	}
	mock.lockPublishMarshal.RLock()
	calls = mock.calls.PublishMarshal
	mock.lockPublishMarshal.RUnlock()
	return calls
}

// PublishMarshalAsync calls PublishMarshalAsyncFunc.
func (mock *MessageQueueClientMock) PublishMarshalAsync(topic string, m protoreflect.ProtoMessage) error {
	if mock.PublishMarshalAsyncFunc == nil {
		panic("MessageQueueClientMock.PublishMarshalAsyncFunc: method is nil but MessageQueueClient.PublishMarshalAsync was just called")
	}
	callInfo := struct {
		Topic string
		M     protoreflect.ProtoMessage
	}{
		Topic: topic,
		M:     m,
	}
	mock.lockPublishMarshalAsync.Lock()
	mock.calls.PublishMarshalAsync = append(mock.calls.PublishMarshalAsync, callInfo)
	mock.lockPublishMarshalAsync.Unlock()
	return mock.PublishMarshalAsyncFunc(topic, m)
}

// PublishMarshalAsyncCalls gets all the calls that were made to PublishMarshalAsync.
// Check the length with:
//
//	len(mockedMessageQueueClient.PublishMarshalAsyncCalls())
func (mock *MessageQueueClientMock) PublishMarshalAsyncCalls() []struct {
	Topic string
	M     protoreflect.ProtoMessage
} {
	var calls []struct {
		Topic string
		M     protoreflect.ProtoMessage
	}
	mock.lockPublishMarshalAsync.RLock()
	calls = mock.calls.PublishMarshalAsync
	mock.lockPublishMarshalAsync.RUnlock()
	return calls
}

// PublishMarshalCore calls PublishMarshalCoreFunc.
func (mock *MessageQueueClientMock) PublishMarshalCore(topic string, m protoreflect.ProtoMessage) error {
	if mock.PublishMarshalCoreFunc == nil {
		panic("MessageQueueClientMock.PublishMarshalCoreFunc: method is nil but MessageQueueClient.PublishMarshalCore was just called")
	}
	callInfo := struct {
		Topic string
		M     protoreflect.ProtoMessage
	}{
		Topic: topic,
		M:     m,
	}
	mock.lockPublishMarshalCore.Lock()
	mock.calls.PublishMarshalCore = append(mock.calls.PublishMarshalCore, callInfo)
	mock.lockPublishMarshalCore.Unlock()
	return mock.PublishMarshalCoreFunc(topic, m)
}

// PublishMarshalCoreCalls gets all the calls that were made to PublishMarshalCore.
// Check the length with:
//
//	len(mockedMessageQueueClient.PublishMarshalCoreCalls())
func (mock *MessageQueueClientMock) PublishMarshalCoreCalls() []struct {
	Topic string
	M     protoreflect.ProtoMessage
} {
	var calls []struct {
		Topic string
		M     protoreflect.ProtoMessage
	}
	mock.lockPublishMarshalCore.RLock()
	calls = mock.calls.PublishMarshalCore
	mock.lockPublishMarshalCore.RUnlock()
	return calls
}

// QueueSubscribe calls QueueSubscribeFunc.
func (mock *MessageQueueClientMock) QueueSubscribe(topic string, msgFunc func([]byte) error) error {
	if mock.QueueSubscribeFunc == nil {
		panic("MessageQueueClientMock.QueueSubscribeFunc: method is nil but MessageQueueClient.QueueSubscribe was just called")
	}
	callInfo := struct {
		Topic   string
		MsgFunc func([]byte) error
	}{
		Topic:   topic,
		MsgFunc: msgFunc,
	}
	mock.lockQueueSubscribe.Lock()
	mock.calls.QueueSubscribe = append(mock.calls.QueueSubscribe, callInfo)
	mock.lockQueueSubscribe.Unlock()
	return mock.QueueSubscribeFunc(topic, msgFunc)
}

// QueueSubscribeCalls gets all the calls that were made to QueueSubscribe.
// Check the length with:
//
//	len(mockedMessageQueueClient.QueueSubscribeCalls())
func (mock *MessageQueueClientMock) QueueSubscribeCalls() []struct {
	Topic   string
	MsgFunc func([]byte) error
} {
	var calls []struct {
		Topic   string
		MsgFunc func([]byte) error
	}
	mock.lockQueueSubscribe.RLock()
	calls = mock.calls.QueueSubscribe
	mock.lockQueueSubscribe.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *MessageQueueClientMock) Shutdown() {
	if mock.ShutdownFunc == nil {
		panic("MessageQueueClientMock.ShutdownFunc: method is nil but MessageQueueClient.Shutdown was just called")
	}
	callInfo := struct {
	}{}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	mock.ShutdownFunc()
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//
//	len(mockedMessageQueueClient.ShutdownCalls())
func (mock *MessageQueueClientMock) ShutdownCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}

// Status calls StatusFunc.
func (mock *MessageQueueClientMock) Status() nats.Status {
	if mock.StatusFunc == nil {
		panic("MessageQueueClientMock.StatusFunc: method is nil but MessageQueueClient.Status was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStatus.Lock()
	mock.calls.Status = append(mock.calls.Status, callInfo)
	mock.lockStatus.Unlock()
	return mock.StatusFunc()
}

// StatusCalls gets all the calls that were made to Status.
// Check the length with:
//
//	len(mockedMessageQueueClient.StatusCalls())
func (mock *MessageQueueClientMock) StatusCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStatus.RLock()
	calls = mock.calls.Status
	mock.lockStatus.RUnlock()
	return calls
}

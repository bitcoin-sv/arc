// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/tx_finder"
	sdkTx "github.com/bsv-blockchain/go-sdk/transaction"
	"sync"
)

// Ensure, that NodeClientMock does implement txfinder.NodeClient.
// If this is not the case, regenerate this file with moq.
var _ txfinder.NodeClient = &NodeClientMock{}

// NodeClientMock is a mock implementation of txfinder.NodeClient.
//
//	func TestSomethingThatUsesNodeClient(t *testing.T) {
//
//		// make and configure a mocked txfinder.NodeClient
//		mockedNodeClient := &NodeClientMock{
//			GetMempoolAncestorsFunc: func(ctx context.Context, ids []string) ([]string, error) {
//				panic("mock out the GetMempoolAncestors method")
//			},
//			GetRawTransactionFunc: func(ctx context.Context, id string) (*sdkTx.Transaction, error) {
//				panic("mock out the GetRawTransaction method")
//			},
//		}
//
//		// use mockedNodeClient in code that requires txfinder.NodeClient
//		// and then make assertions.
//
//	}
type NodeClientMock struct {
	// GetMempoolAncestorsFunc mocks the GetMempoolAncestors method.
	GetMempoolAncestorsFunc func(ctx context.Context, ids []string) ([]string, error)

	// GetRawTransactionFunc mocks the GetRawTransaction method.
	GetRawTransactionFunc func(ctx context.Context, id string) (*sdkTx.Transaction, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetMempoolAncestors holds details about calls to the GetMempoolAncestors method.
		GetMempoolAncestors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []string
		}
		// GetRawTransaction holds details about calls to the GetRawTransaction method.
		GetRawTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
	}
	lockGetMempoolAncestors sync.RWMutex
	lockGetRawTransaction   sync.RWMutex
}

// GetMempoolAncestors calls GetMempoolAncestorsFunc.
func (mock *NodeClientMock) GetMempoolAncestors(ctx context.Context, ids []string) ([]string, error) {
	if mock.GetMempoolAncestorsFunc == nil {
		panic("NodeClientMock.GetMempoolAncestorsFunc: method is nil but NodeClient.GetMempoolAncestors was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []string
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockGetMempoolAncestors.Lock()
	mock.calls.GetMempoolAncestors = append(mock.calls.GetMempoolAncestors, callInfo)
	mock.lockGetMempoolAncestors.Unlock()
	return mock.GetMempoolAncestorsFunc(ctx, ids)
}

// GetMempoolAncestorsCalls gets all the calls that were made to GetMempoolAncestors.
// Check the length with:
//
//	len(mockedNodeClient.GetMempoolAncestorsCalls())
func (mock *NodeClientMock) GetMempoolAncestorsCalls() []struct {
	Ctx context.Context
	Ids []string
} {
	var calls []struct {
		Ctx context.Context
		Ids []string
	}
	mock.lockGetMempoolAncestors.RLock()
	calls = mock.calls.GetMempoolAncestors
	mock.lockGetMempoolAncestors.RUnlock()
	return calls
}

// GetRawTransaction calls GetRawTransactionFunc.
func (mock *NodeClientMock) GetRawTransaction(ctx context.Context, id string) (*sdkTx.Transaction, error) {
	if mock.GetRawTransactionFunc == nil {
		panic("NodeClientMock.GetRawTransactionFunc: method is nil but NodeClient.GetRawTransaction was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetRawTransaction.Lock()
	mock.calls.GetRawTransaction = append(mock.calls.GetRawTransaction, callInfo)
	mock.lockGetRawTransaction.Unlock()
	return mock.GetRawTransactionFunc(ctx, id)
}

// GetRawTransactionCalls gets all the calls that were made to GetRawTransaction.
// Check the length with:
//
//	len(mockedNodeClient.GetRawTransactionCalls())
func (mock *NodeClientMock) GetRawTransactionCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetRawTransaction.RLock()
	calls = mock.calls.GetRawTransaction
	mock.lockGetRawTransaction.RUnlock()
	return calls
}

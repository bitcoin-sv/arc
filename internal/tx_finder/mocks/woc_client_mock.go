// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/tx_finder"
	"github.com/bitcoin-sv/arc/pkg/woc_client"
	"sync"
)

// Ensure, that WocClientMock does implement txfinder.WocClient.
// If this is not the case, regenerate this file with moq.
var _ txfinder.WocClient = &WocClientMock{}

// WocClientMock is a mock implementation of txfinder.WocClient.
//
//	func TestSomethingThatUsesWocClient(t *testing.T) {
//
//		// make and configure a mocked txfinder.WocClient
//		mockedWocClient := &WocClientMock{
//			GetRawTxsFunc: func(ctx context.Context, ids []string) ([]*woc_client.WocRawTx, error) {
//				panic("mock out the GetRawTxs method")
//			},
//		}
//
//		// use mockedWocClient in code that requires txfinder.WocClient
//		// and then make assertions.
//
//	}
type WocClientMock struct {
	// GetRawTxsFunc mocks the GetRawTxs method.
	GetRawTxsFunc func(ctx context.Context, ids []string) ([]*woc_client.WocRawTx, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetRawTxs holds details about calls to the GetRawTxs method.
		GetRawTxs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []string
		}
	}
	lockGetRawTxs sync.RWMutex
}

// GetRawTxs calls GetRawTxsFunc.
func (mock *WocClientMock) GetRawTxs(ctx context.Context, ids []string) ([]*woc_client.WocRawTx, error) {
	if mock.GetRawTxsFunc == nil {
		panic("WocClientMock.GetRawTxsFunc: method is nil but WocClient.GetRawTxs was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []string
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockGetRawTxs.Lock()
	mock.calls.GetRawTxs = append(mock.calls.GetRawTxs, callInfo)
	mock.lockGetRawTxs.Unlock()
	return mock.GetRawTxsFunc(ctx, ids)
}

// GetRawTxsCalls gets all the calls that were made to GetRawTxs.
// Check the length with:
//
//	len(mockedWocClient.GetRawTxsCalls())
func (mock *WocClientMock) GetRawTxsCalls() []struct {
	Ctx context.Context
	Ids []string
} {
	var calls []struct {
		Ctx context.Context
		Ids []string
	}
	mock.lockGetRawTxs.RLock()
	calls = mock.calls.GetRawTxs
	mock.lockGetRawTxs.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/bsv-blockchain/go-sdk/chainhash"
	"sync"
)

// ChainTrackerMock is a mock implementation of beef.ChainTracker.
//
//	func TestSomethingThatUsesChainTracker(t *testing.T) {
//
//		// make and configure a mocked beef.ChainTracker
//		mockedChainTracker := &ChainTrackerMock{
//			IsValidRootForHeightFunc: func(root *chainhash.Hash, height uint32) (bool, error) {
//				panic("mock out the IsValidRootForHeight method")
//			},
//		}
//
//		// use mockedChainTracker in code that requires beef.ChainTracker
//		// and then make assertions.
//
//	}
type ChainTrackerMock struct {
	// IsValidRootForHeightFunc mocks the IsValidRootForHeight method.
	IsValidRootForHeightFunc func(root *chainhash.Hash, height uint32) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// IsValidRootForHeight holds details about calls to the IsValidRootForHeight method.
		IsValidRootForHeight []struct {
			// Root is the root argument value.
			Root *chainhash.Hash
			// Height is the height argument value.
			Height uint32
		}
	}
	lockIsValidRootForHeight sync.RWMutex
}

// IsValidRootForHeight calls IsValidRootForHeightFunc.
func (mock *ChainTrackerMock) IsValidRootForHeight(root *chainhash.Hash, height uint32) (bool, error) {
	if mock.IsValidRootForHeightFunc == nil {
		panic("ChainTrackerMock.IsValidRootForHeightFunc: method is nil but ChainTracker.IsValidRootForHeight was just called")
	}
	callInfo := struct {
		Root   *chainhash.Hash
		Height uint32
	}{
		Root:   root,
		Height: height,
	}
	mock.lockIsValidRootForHeight.Lock()
	mock.calls.IsValidRootForHeight = append(mock.calls.IsValidRootForHeight, callInfo)
	mock.lockIsValidRootForHeight.Unlock()
	return mock.IsValidRootForHeightFunc(root, height)
}

// IsValidRootForHeightCalls gets all the calls that were made to IsValidRootForHeight.
// Check the length with:
//
//	len(mockedChainTracker.IsValidRootForHeightCalls())
func (mock *ChainTrackerMock) IsValidRootForHeightCalls() []struct {
	Root   *chainhash.Hash
	Height uint32
} {
	var calls []struct {
		Root   *chainhash.Hash
		Height uint32
	}
	mock.lockIsValidRootForHeight.RLock()
	calls = mock.calls.IsValidRootForHeight
	mock.lockIsValidRootForHeight.RUnlock()
	return calls
}

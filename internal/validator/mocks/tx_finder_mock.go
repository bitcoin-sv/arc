// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/bitcoin-sv/arc/internal/validator"
	sdkTx "github.com/bsv-blockchain/go-sdk/transaction"
	"sync"
)

// Ensure, that TxFinderIMock does implement validator.TxFinderI.
// If this is not the case, regenerate this file with moq.
var _ validator.TxFinderI = &TxFinderIMock{}

// TxFinderIMock is a mock implementation of validator.TxFinderI.
//
//	func TestSomethingThatUsesTxFinderI(t *testing.T) {
//
//		// make and configure a mocked validator.TxFinderI
//		mockedTxFinderI := &TxFinderIMock{
//			GetMempoolAncestorsFunc: func(ctx context.Context, ids []string) ([]string, error) {
//				panic("mock out the GetMempoolAncestors method")
//			},
//			GetRawTxsFunc: func(ctx context.Context, source validator.FindSourceFlag, ids []string) []*sdkTx.Transaction {
//				panic("mock out the GetRawTxs method")
//			},
//		}
//
//		// use mockedTxFinderI in code that requires validator.TxFinderI
//		// and then make assertions.
//
//	}
type TxFinderIMock struct {
	// GetMempoolAncestorsFunc mocks the GetMempoolAncestors method.
	GetMempoolAncestorsFunc func(ctx context.Context, ids []string) ([]string, error)

	// GetRawTxsFunc mocks the GetRawTxs method.
	GetRawTxsFunc func(ctx context.Context, source validator.FindSourceFlag, ids []string) []*sdkTx.Transaction

	// calls tracks calls to the methods.
	calls struct {
		// GetMempoolAncestors holds details about calls to the GetMempoolAncestors method.
		GetMempoolAncestors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []string
		}
		// GetRawTxs holds details about calls to the GetRawTxs method.
		GetRawTxs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Source is the source argument value.
			Source validator.FindSourceFlag
			// Ids is the ids argument value.
			Ids []string
		}
	}
	lockGetMempoolAncestors sync.RWMutex
	lockGetRawTxs           sync.RWMutex
}

// GetMempoolAncestors calls GetMempoolAncestorsFunc.
func (mock *TxFinderIMock) GetMempoolAncestors(ctx context.Context, ids []string) ([]string, error) {
	if mock.GetMempoolAncestorsFunc == nil {
		panic("TxFinderIMock.GetMempoolAncestorsFunc: method is nil but TxFinderI.GetMempoolAncestors was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []string
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockGetMempoolAncestors.Lock()
	mock.calls.GetMempoolAncestors = append(mock.calls.GetMempoolAncestors, callInfo)
	mock.lockGetMempoolAncestors.Unlock()
	return mock.GetMempoolAncestorsFunc(ctx, ids)
}

// GetMempoolAncestorsCalls gets all the calls that were made to GetMempoolAncestors.
// Check the length with:
//
//	len(mockedTxFinderI.GetMempoolAncestorsCalls())
func (mock *TxFinderIMock) GetMempoolAncestorsCalls() []struct {
	Ctx context.Context
	Ids []string
} {
	var calls []struct {
		Ctx context.Context
		Ids []string
	}
	mock.lockGetMempoolAncestors.RLock()
	calls = mock.calls.GetMempoolAncestors
	mock.lockGetMempoolAncestors.RUnlock()
	return calls
}

// GetRawTxs calls GetRawTxsFunc.
func (mock *TxFinderIMock) GetRawTxs(ctx context.Context, source validator.FindSourceFlag, ids []string) []*sdkTx.Transaction {
	if mock.GetRawTxsFunc == nil {
		panic("TxFinderIMock.GetRawTxsFunc: method is nil but TxFinderI.GetRawTxs was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Source validator.FindSourceFlag
		Ids    []string
	}{
		Ctx:    ctx,
		Source: source,
		Ids:    ids,
	}
	mock.lockGetRawTxs.Lock()
	mock.calls.GetRawTxs = append(mock.calls.GetRawTxs, callInfo)
	mock.lockGetRawTxs.Unlock()
	return mock.GetRawTxsFunc(ctx, source, ids)
}

// GetRawTxsCalls gets all the calls that were made to GetRawTxs.
// Check the length with:
//
//	len(mockedTxFinderI.GetRawTxsCalls())
func (mock *TxFinderIMock) GetRawTxsCalls() []struct {
	Ctx    context.Context
	Source validator.FindSourceFlag
	Ids    []string
} {
	var calls []struct {
		Ctx    context.Context
		Source validator.FindSourceFlag
		Ids    []string
	}
	mock.lockGetRawTxs.RLock()
	calls = mock.calls.GetRawTxs
	mock.lockGetRawTxs.RUnlock()
	return calls
}
